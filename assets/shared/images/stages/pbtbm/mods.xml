<Mods LoadCommand = "%xero(function(self)
	if not P1 or not P2 then
		backToSongWheel('Two Player Mode Required')
		return
	end

	GAMESTATE:ForceSmoothLines(0)

	local slumpage = false
	if GAMESTATE:GetCurrentSteps(0):GetDifficulty()==4 or GAMESTATE:GetCurrentSteps(1):GetDifficulty()==4 or GAMESTATE:GetCurrentSteps(0):GetDifficulty()==5 or GAMESTATE:GetCurrentSteps(1):GetDifficulty()==5 then slumpage=true end

	-- random text	
	if slumpage then
		local r_texts = {GAMESTATE:GetFileStructure( GAMESTATE:GetCurrentSong():GetSongDir()..'lua/rtext/' )}
		local r_choice = (math.random( #r_texts/2 )-1) * 2 + 1

		bloodtext:Load( GAMESTATE:GetCurrentSong():GetSongDir()..'lua/rtext/'.. r_choice ..' (doubleres).png' )
		moontext:Load( GAMESTATE:GetCurrentSong():GetSongDir()..'lua/rtext/'.. r_choice+1 ..' (doubleres).png' )

		if bloodtext:GetWidth()>450 then bloodtext:basezoomx(450 / bloodtext:GetWidth()) end
		if moontext:GetWidth()>450 then moontext:basezoomx(450 / moontext:GetWidth()) end
	else
		bloodtext:Load( GAMESTATE:GetCurrentSong():GetSongDir()..'lua/rtext/1 (doubleres).png' )
		moontext:Load( GAMESTATE:GetCurrentSong():GetSongDir()..'lua/rtext/2 (doubleres).png' )
	end

	-- red filter on slumpage because its scary
	if slumpage then
		color_sprite:GetShader():uniform3f('col2', 0.5, 0, 0)

		greenmaskbg:diffuse(1,0,0,1)
		pixelwater:diffuse(1,0,0,1)
	end

	-- judgment / combo proxies
	for pn = 1, 2 do
		setupJudgeProxy(PJ[pn], P[pn]:GetChild('Judgment'), pn)
		setupJudgeProxy(PC[pn], P[pn]:GetChild('Combo'), pn)
	end
	for pn=1,2 do
		PJ[pn]:x( scx + sw*0.33*(pn*2-3) )
		PC[pn]:x( scx + sw*0.33*(pn*2-3) )

		PJ[pn]:basezoomx(0.75) PJ[pn]:basezoomy(0.75)
		PJ[pn]:basezoomx(0.75) PJ[pn]:basezoomy(0.75)
	end

	-- player proxies
	for pn = 1, #PP do
		PP[pn]:SetTarget(P[pn]:GetChild('NoteField'))
		P[pn]:hidden(1)
	end
	for pn = 1, #PP do		
		PP[pn]:xy(0,0)
	end

	-- stuff
	local function mod_outin(beat, len, per1, per2, mod, oute, ine)
		ease
		{beat, len/2, oute or outCirc, per2, mod}
		{beat+len/2, len/2, ine or inCirc, per1, mod}
	end

	local function mod_hit(beat, len, per, mod, e)
		ease
		{beat, 0, instant, per, mod}
		{beat, len, e or outCirc, 0, mod}
	end

	local function TiB(b)
		return (1/GAMESTATE:GetCurBPS()) * b
	end

	local function rad(d)
		return math.rad(d) * 100
	end

	local function mixEase(e1, e2, point)
        if not point then point = 0.5 end

        return function(a)
            if a < point then
                return e1(a / point) * point
            else
                return e2((a - point) / (1 - point)) * (1 - point) + point
            end
        end
    end
	local function modulo(a, b)
		return a - math.floor(a/b)*b;
	end

	local function mindf_reverseRotation(angleX, angleY, angleZ)
		local sinX = math.sin(angleX);
		local cosX = math.cos(angleX);
		local sinY = math.sin(angleY);
		local cosY = math.cos(angleY);
		local sinZ = math.sin(angleZ);
		local cosZ = math.cos(angleZ);
		return { math.atan2(-cosX*sinY*sinZ-sinX*cosZ,cosX*cosY),
				math.asin(-cosX*sinY*cosZ+sinX*sinZ),
				math.atan2(-sinX*sinY*cosZ-cosX*sinZ,cosY*cosZ) }
	end			
	local function mindf_rotateAndCounter(xDegrees, yDegrees, zDegrees)
		local DEG_TO_RAD = math.pi / 180;
		local angles = mindf_reverseRotation(xDegrees * DEG_TO_RAD, yDegrees * DEG_TO_RAD, zDegrees * DEG_TO_RAD)			
		return {xDegrees, yDegrees, zDegrees, angles[1]*100, angles[2]*100, angles[3]*100}
	end
	definemod {'rr_x', 'rr_y', 'rr_z', function(rx,ry,rz) 
		local ang = mindf_rotateAndCounter(rx,ry,rz)

		return ang[1], ang[2], ang[3], ang[4], ang[5], ang[6]
	end, 'rotationx', 'rotationy', 'rotationz', 'confusionxoffset', 'confusionyoffset', 'confusionzoffset'}

	-- your code goes here here:
	setdefault {1.75, 'xmod', 100, 'dizzyholds', 100, 'stealthpastreceptors', 1, 'bgzoom', 1, 'allzoom'}
	-- setdefault {157*3, 'confusionoffset0', 157*2, 'confusionoffset2', 157, 'confusionoffset3'}
	local barNumber = #audioData[1] - 1

	-- help me

	-- audio Line
	aft(audioline_aft)

	audioline:SetDrawMode('Quads')
	audioline:SetNumVertices(barNumber*4)
	-- audioline:SetNumVertices(4)
	-- audioline:SetPolygonMode(1)
	
	local tw = DISPLAY:GetDisplayWidth()/audioline_aft:GetTexture():GetTextureWidth()
	local th = DISPLAY:GetDisplayHeight()/audioline_aft:GetTexture():GetTextureHeight()

	audioline:SetTexture( audioline_aft:GetTexture() )

	local m_audioheightmult = 0
	aux 'audioheightmult'
	func {0, 999, function(beat, poptions) 
		local current = math.floor(beat*12)
		if current<1 then current=1 end
		if current>#audioData then current=#audioData end

		for i=0,barNumber-1 do
			local value = audioData[current][i+2]
			local vnext = audioData[current][i+3] or audioData[current][i+2]

			-- audioline:SetVertexPosition( i, (i-1) * (sw/barNumber) - (sw/barNumber) * 19,  scy - sh*value, 0)
			audioline:SetVertexPosition( i*4+0, i     * (sw/barNumber) - (sw/barNumber) * barNumber/2 - scx, scy - sh*value*poptions[1].audioheightmult - scy, 0 )
			audioline:SetVertexPosition( i*4+1, (i+1) * (sw/barNumber) - (sw/barNumber) * barNumber/2 - scx, scy - sh*vnext*poptions[1].audioheightmult - scy, 0 )
			audioline:SetVertexPosition( i*4+2, (i+1) * (sw/barNumber) - (sw/barNumber) * barNumber/2 - scx, scy - scy, 0 )
			audioline:SetVertexPosition( i*4+3, i     * (sw/barNumber) - (sw/barNumber) * barNumber/2 - scx, scy - scy, 0 )

			audioline:SetVertexTexCoord( i*4+0, i     * (tw/barNumber), th, 0 )
			audioline:SetVertexTexCoord( i*4+1, (i+1) * (tw/barNumber), th, 0 )
			audioline:SetVertexTexCoord( i*4+2, (i+1) * (tw/barNumber), 0, 0 )
			audioline:SetVertexTexCoord( i*4+3, i     * (tw/barNumber), 0, 0 )
		end

		m_audioheightmult = poptions[1].audioheightmult
	end}

	-- draw line part
	local lineDF = function()
		audioline:y(-10*m_audioheightmult)
		audioline:SetPolygonMode(1)
		audioline:glow(1,1,1,1)
		audioline:Draw()

		audioline:y(0)
		audioline:SetPolygonMode(0)
		audioline:glow(0,0,0,0)
		audioline:Draw()
	end
	audioline_con:SetDrawFunction(lineDF)

	-- use them later probably
	audioline_con:hidden(0)

	-- water
	aft(water_aft)
	sprite(water_sprite)
	aftsprite(water_aft, water_sprite)

	-- boom	

	---- prevent moon texture from loading into sprite and interfering with bloom shader (it was only ever the moon texture for some reason)
	func {0, 999, function() if bloom_aft:GetHidden() then bloom_aft:hidden(0) bloomh_sprite:SetTexture(bloom_aft:GetTexture()) bloomlaser_aft:hidden(0) bloomlaser_sprite:SetTexture(bloomlaser_aft:GetTexture()) bloomlaser_sprite:diffusealpha(0)  end end}

	
	-- testest:SetTexture(bloom_aft:GetTexture())
	-- testest:hidden(1)

	---- update bloom based on low end and also zoom sometimes
	aux 'audiozoommult'
	aux 'aftzoom'
	aux 'aftzoommult'
	func {0, 999, function(beat, p) 
		local current = math.floor(beat*12)
		if current<1 then current=1 end
		if current>#audioData then current=#audioData end

		local c = audioData[current]
		local amt = inQuad((c[2] + c[3] + c[4] + c[5] + c[6] + c[7] + c[8] + c[9])/8)
		-- local amt = audioData[current][1]

		bloomh_sprite:GetShader():uniform1f('var', amt*200)	
		bloomh_sprite:diffusealpha(math.min(amt*1.25,1))

		scrollcover_l_shine:diffusealpha(0.25 + 0.75*amt)
		scrollcover_r_shine:diffusealpha(0.25 + 0.75*amt)

		pixelgradient:diffusealpha(0.25 + 0.75*amt)

		-- print(p[1].allzoom + amt*0.2*p[1].audiozoommult)
		p[1].allzoom = p[1].allzoom + amt*0.2*p[1].audiozoommult

		-- print(p[1].bgy, p[1].bgzoom)
		for i=1,2 do
			screenglare[i]:diffusealpha(0.25+0.75*inQuad(amt))
		end

		if beat>460 then zoom_sprite:zoom( p[1].aftzoom + amt*0.2*p[1].aftzoommult ) end
	end}
	setdefault {1, 'aftzoom'}

	-- color correct
	aft(color_aft)
	sprite(color_sprite)
	aftsprite(color_aft, color_sprite)

	--------- Wow
	func {0, 'screenhide:hidden', 1}

	local bgp = { x=0, y=0 }
	definemod {'bgx', 'bgy', function(x, y, pn) 
		if pn<3 then
			bg:x(scx+x)

			bg:y(scy+y)
			water_sprite:GetShader():uniform1f('reflectionY', 0.4 - y/sh)

			bgp.x = x
			bgp.y = y
		end
	end}
	definemod {'bgzoom', function(zo, pn) 
		if pn<3 then
			bg:zoom(zo)
		end
	end}

	definemod {'allzoom', function(z, pn) 
		if pn<3 then
			bg:x2( bgp.x * (z-1) )
			bg:y2( bgp.y * (z-1) )

			bg:zoom2(z) 
			
			plr_af:zoom2(z) 
		end
	end}

	set {0, 123*2.5, 'bgy', 2.5, 'bgzoom', 1.5, 'allzoom'}
	ease 
	{0, 32, outCirc, 123*2, 'bgy', 2, 'bgzoom', 1, 'allzoom'}
	{32, 32, inOutQuad, 0, 'bgy', 1, 'bgzoom'}

	ease {96, 1, outExpo, 1, 'audioheightmult', 1, 'audiozoommult'}

	-- slightly confusion dpad
	set 
	{0, 50, 'reverse', 50, 'flip', 100, 'spiralholds', -100, 'drawsizeback', 1.25, 'xmod', 200, 'splinextype', 200, 'splineytype', -10, 'y'}
	{0, 45, 'rr_z'}
	{0, -500, 'cubicz', 20, 'drawsize', 20, 'arrowpathdrawsize'}

	set {0, 
		-50, 'movex0', 50, 'movey0',
		50, 'movex1', 50, 'movey1',
		-50, 'movex2', -50, 'movey2',
		50, 'movex3', -50, 'movey3',
	}

	func {0, function() 
		for pn=1,2 do
			local p = P[pn]

			-- leftright
			p:SetXSpline(1, 0, -1500, 1500, -1)
			p:SetXSpline(1, 3,  1500, 1500, -1)

			-- p:SetYSpline(1, 0, 5000, 1500, -1)
			-- p:SetYSpline(1, 3, -5000, 1500, -1)
			-- updown
			p:SetYSpline(1, 2, -1500, 1500, -1)
			p:SetYSpline(1, 1,  1500, 1500, -1)

			-- p:SetXSpline(1, 2, -5000, 1500, -1)
			-- p:SetXSpline(1, 1,  5000, 1500, -1)

			-- gradient
			for c=0,3 do
				for _,f in ipairs {'Path', 'Arrow'} do
					p['SetNum'..f..'GradientPoints'](p, c, 3)

					p['Set'..f..'GradientPoint'](p, 0, c, 0)
					p['Set'..f..'GradientPoint'](p, 1, c, 5)
					p['Set'..f..'GradientPoint'](p, 2, c, 6.5)

					p['Set'..f..'GradientColor'](p, 0, c, 1,1,1,1)
					p['Set'..f..'GradientColor'](p, 1, c, 1,1,1,1)
					p['Set'..f..'GradientColor'](p, 2, c, 1,1,1,0)
				end
			end
		end
	end}

	ease {16, 16, inQuad, 100, 'arrowpath'}

	add 
	{32, 8, outCirc, -45, 'rr_z'}
	{32, 32, inQuad, -360, 'rr_z'}

	for i=0,7 do
		ease
		{31.0+i*4, 1.0, inCirc, 50, 'centered2'}
		{32.0+i*4, 4.0, outQuad, 0, 'centered2'}
	end

	add 
	{60, 4, inCirc, -180, 'rr_z'}
	{64, 16, outCirc, -720, 'rr_z'}

	plr=1

	-- reset {62}
	set {62, 100, 'splinexreset', 100, 'splineyreset', 0, 'reverse', 0, 'flip', 1.75, 'xmod', 0, 'arrowpath', 0, 'y', 0, 'cubicz', 0, 'drawsize'}
	for c=0,3 do
		set {62, 0, 'movex'..c, 0, 'movey'..c}
	end

	set {62, 0, 'zoom'}
	ease 
	{62, 2, inCirc, 50, 'zoom'}
	{64, 16, outExpo, 100, 'zoom'}

	{62, 2, inCirc, 100, 'centered2', 50, 'dark', plr=2}
	{64, 16, outExpo, 750, 'centered2', 100, 'dark', 0, 'arrowpath', plr=2}

	func {62, 18, function(b, p) 
		p[1].rr_z = 0
	end}

	plr=nil

	set {80, 100, 'splinexreset', 100, 'splineyreset'}

	local xc = {'xmodmult', 'allzoom', 'bgy', 'bgzoom'}
	for c=0,3 do 
		table.insert(xc, 'drunk'..c) 
		table.insert(xc, 'drunky'..c) 
		table.insert(xc, 'drunkoffset'..c) 
		table.insert(xc, 'drunkyoffset'..c) 
		table.insert(xc, 'drunkspacing'..c) 
		table.insert(xc, 'drunkyspacing'..c) 
	end
	reset {80, exclude=xc}

	for c=0,3 do
		func {80, 'P[1]:SetNumArrowGradientPoints', c, 0}
		func {80, 'P[2]:SetNumArrowGradientPoints', c, 0}
	end

	-------- big screech
	func {64, 16, outCirc, 0.3, 0, function(a) 
		glitch_sprite:GetShader():uniform1f('amp2', a) 
		glitch_sprite:GetShader():uniform1f('amp', a*0.1) 
	end}
	add
	-- {80, 8, outCirc, 360, 'rr_y'}
	{80, 15, inQuad, 360*23, 'rr_y'}

	-- set {64, -800, 'movey'}
	-- ease 
	-- {64, 31, inOutSine, 800, 'centered2'}
	for c=0,3 do
		ease 
		{64-0.5, 1, inOutSine, 1000, 'drunk'..c, 1000, 'drunky'..c}
		{64, 31, inOutSine, 0, 'drunk'..c, 0, 'drunky'..c}
		set {64, math.random(0,50000), 'drunkoffset'..c, math.random(-0,50000), 'drunkyoffset'..c}
		set {64, math.random(-1000,1000), 'drunkspacing'..c, math.random(-1000,1000), 'drunkyspacing'..c}
	end

	ease 
	{64-1, 2, inOutExpo, 2, 'allzoom', 123*2, 'bgy', 2, 'bgzoom'}
	{64, 31, inCirc, 1, 'allzoom', 1, 'bgzoom', 123, 'bgy'}
	ease {95, 1, outElastic, 0, 'bgy', 4, 'allzoom', 20, 'reverse', -10000, 'tinyz', -1000, 'z'}
	ease {96-0.5, 1, inOutCirc, 1, 'allzoom', 0, 'reverse', 0, 'tinyz', 0, 'z'}

	---- Vibrate
	definemod {'vibratex', 'vibratey', function(x,y) 
		for pn=1,2 do
			P[pn]('NoteField'):x2( ((math.random()*2)-1)*x )
			P[pn]('NoteField'):y2( ((math.random()*2)-1)*y )
		end
	end}
	definemod {'vibrate', function(v) return v,v end, 'vibratex', 'vibratey'}

	for i,v in ipairs {96, 102.5, 104, 110.5, 112, 118.5, 120, 121, 121.25, 121.5, 121.75, 122, 123, 123.25, 123.5, 123.75, 124, 125, 126} do
		ease {v, 2, flip(outCirc), 50, 'vibratex'}
	end

	---- what is for loop
	set {96, 50, 'drawsize'}
	ease {96-0.5, 1, inOutCirc, 90, 'zoom', -100, 'movey'}

	swap {96, 1, outElastic, 'ldru'}
	swap {102.5, 1, outElastic, 'ldur'}

	swap {104, 1, outElastic, 'dlur'}
	swap {110.5, 1, outElastic, 'ldur'}

	swap {112, 1, outElastic, 'lrud'}
	swap {118.5, 1, outElastic, 'ldur'}

	swap {120, 1, outElastic, 'udlr'}
	swap {122, 1, outElastic, 'ldur'}

	swap {124, 1, outElastic, 'dlru'}
	swap {125, 1, outElastic, 'rudl'}
	swap {126, 1, outElastic, 'ldur'}

	ease
	{96, 1, outElastic, -500, 'movez2', -500, 'movez3', -10500, 'tinyz2', -10500, 'tinyz3'}
	{102.5, 1, outElastic, 0, 'movez2', 0, 'movez3', 0, 'tinyz2', 0, 'tinyz3'}

	{104, 1, outElastic, -500, 'movez0', -500, 'movez1', -10500, 'tinyz0', -10500, 'tinyz1'}
	{110.5, 1, outElastic, 0, 'movez0', 0, 'movez1', 0, 'tinyz0', 0, 'tinyz1'}

	{112, 1, outElastic, -500, 'movez1', -500, 'movez3', -10500, 'tinyz1', -10500, 'tinyz3'}
	{118.5, 1, outElastic, 0, 'movez1', 0, 'movez3', 0, 'tinyz1', 0, 'tinyz3'}

	{120, 1, outElastic, -500, 'movez0', -500, 'movez2', -10500, 'tinyz0', -10500, 'tinyz2'}
	{122, 1, outElastic, 0, 'movez0', 0, 'movez2', 0, 'tinyz0', 0, 'tinyz2'}

	-- build up
	ease {127-0.5, 1, inOutCirc, 0, 'movey'}

	set {127.5, 1000, 'cubicxoffset', -100, 'orient'}
	for i=0,14 do
		local mult = (i%2*2-1)

		ease 
		{127.5+i, 0.5, inExpoSnap, 75, 'brake', 50*mult, 'cubicx', -50*mult, 'drunk', -200, 'tiny', -200, 'tinyz'}
		{128+i, 1, outCirc, 0, 'brake', 0, 'cubicx'}
		{128+i, 2, outExpo, 0, 'drunk', 0, 'tiny', 0, 'tinyz'}
	end

	set {128, -100, 'drawsizeback'}
	ease {128, 14, inOutQuad, -90, 'rr_x', -200, 'cubicz', -140, 'y', 1.5, 'xmod'}

	for i=0,3 do
		set 
		{145.5 + i*2, 9999, 'drunkspeed', 9999, 'tipsyspeed', 200, 'tipsy'}
		{146 + i*2, 0, 'drunkspeed', 0, 'tipsyspeed', 0, 'tipsy'}

		set 
		{152.5 + i, 9999, 'drunkspeed', 9999, 'tipsyspeed', 200, 'tipsy'}
		{153 + i, 0, 'drunkspeed', 0, 'tipsyspeed', 0, 'tipsy'}

		swap {145.5 + i*2, 1, outCirc, i%2==0 and 'ludr' or 'ldur'}
		swap {152.5 + i, 1, outCirc, i%2==0 and 'ludr' or 'ldur'}
	end
	for i=0,23 do
		local mult = (i%2*2-1)

		ease 
		{143.75+i/2, 0.25, inExpo, 100*mult, 'drunk', -200, 'tiny', -200, 'tinyz'}
		{144+i/2, 0.5, linear, 0, 'drunk'}
		{144+i/2, 0.5, outExpo, 0, 'tiny', 0, 'tinyz'}
	end

	for i=0,7 do
		local mult = (i%2*2-1)

		ease 
		{144.0-0.5+i, 1, inOutExpo, 50*mult, 'cubicx'}
		{152.0-0.25+i/2, 0.5, inOutExpo, 50*mult, 'cubicx'}
	end

	set {156, 0, 'cubicx'}
	ease {156-1, 2, inOutExpo, 0, 'rr_x', 0, 'cubicz', 0, 'cubicx', 0, 'y', 100, 'zoom', 1.75, 'xmod'}

	ease 
	{152, 4, inCubic, 123, 'bgy'}
	{152, 8, inOutExpo, 123*2, 'bgy', 2, 'bgzoom'}

	ease 
	{156-0.5, 1, inOutCirc, 1.5, 'allzoom'}
	{156, 4, outCubic, 1, 'allzoom'}

	-------- scroll setup
	for i=1,#scroll_prx do
		scroll_prx[i]:SetTarget( P[ (i-1)%2 + 1 ]('NoteField') )
		scroll_prx[i]:hidden(1)

	end
	-- scroll_prx[1]:x(256)
	-- scroll_prx[2]:x(-256)
	for i=0,2 do
		scroll_prx[i*2+1]:x(256 * (i+1))
		scroll_prx[i*2+2]:x(-256 * (i+1))

		-- print(256 * (i+1))
	end

	-- PP[1]:hidden(1)
	-- PP[2]:hidden(1)

	set 
	{156, 200, 'tiny1', 200, 'tiny3', plr=1}
	{156, 200, 'tiny0', 200, 'tiny2', plr=2}

	ease 
	{156-1, 2, inOutExpo, 4000, 'arrowpathsize'}
	{156-1, 2, inOutExpo, 100, 'arrowpath0', 100, 'arrowpath2', plr=1}
	{156-1, 2, inOutExpo, 100, 'arrowpath1', 100, 'arrowpath3', plr=2}

	set {155, 50, 'arrowpathdrawsizeback', 50, 'arrowpathdrawsize', 1000, 'arrowpathgrain', 20, 'drawsize'}

	aux 'pscroll'
	local oldamt = 0
	local oldbeat = 0

	func {156, 68, function(beat, p) 
		local amt = p[1].pscroll
		
		for i,v in ipairs {PP[1], scroll_prx[1], scroll_prx[3]} do
			v:x2( modulo(-amt*256, -256) )
		end
		for i,v in ipairs {PP[2], scroll_prx[2], scroll_prx[4]} do
			v:x2( modulo(amt*256, 256) )
		end

		scrollcover_l_stripe:customtexturerect( 0, 0 + amt*2, 1, 32 + amt*2 )
		scrollcover_r_stripe:customtexturerect( 0, 0 - amt*2, 1, 32 - amt*2 )

		---- velocity stuff
		local delta = beat-oldbeat
		oldbeat=beat

		local befvel = amt-oldamt
		oldamt=amt

		local vel = befvel/delta

		p[1].cubicx = vel*(beat>216 and 20 or 40)
		p[2].cubicx = vel*-(beat>216 and 20 or 40)

		-- for pn=1,2 do 
		-- 	p[pn].tinyx = math.abs(vel)*-100 
		-- 	p[pn].tinyy = math.abs(vel)*30 
		-- end
	end}

	func {156-1, 2, inOutExpo, 1, 0, function(a) 
		scrollcover_l:cropright(a) scrollcover_r:cropleft(a) 
		scrollcover_l_stripe:cropright(a) scrollcover_r_stripe:cropleft(a) 
		scrollcover_l_shine:cropright(a) scrollcover_r_shine:cropright(a) 
	end}
	func {158, 'scroll_prx[1]:hidden', 0}
	func {158, 'scroll_prx[2]:hidden', 0}
	func {158, 'scroll_prx[3]:hidden', 0}
	func {158, 'scroll_prx[4]:hidden', 0}

	func {155, function() 
		for pn=1,2 do
			local p = P[pn]

			for c=0,3 do
				-- print(c, pn)
				p:SetNumPathGradientPoints(c, 3)

				p:SetPathGradientPoint(0, c, -2)
				p:SetPathGradientPoint(1, c, 0)
				p:SetPathGradientPoint(2, c, 6)

				p:SetPathGradientColor(0, c, 1, 1, 1, 0)
				p:SetPathGradientColor(1, c, 0, 0, 0, 1)
				p:SetPathGradientColor(2, c, 1, 1, 1, 0)
			end
		end
	end} 

	-------- scroll do up
	ease {156, 4, outQuad, 1.5, 'xmod'}
	set {160, 50, 'orient'}
	for i=0,7 do
		if i%4~=3 then
			add 
			{160 + i*8, 4, inOutQuad, 8, 'pscroll'}

			if i%2==0 then
				add
				{164 + i*8, 2, inQuad, -3.5, 'pscroll'}
				{166 + i*8, 4, outElastic, -0.5, 'pscroll'}
			end
		end
	end

	for i=0,23 do
		ease {160+i, 1, flip(outCirc), -200, 'tiny', -1000, 'tinyz'}
	end
	for i=0,23 do
		if not (i>=12 and i<16) then
			ease {192+i, 1, flip(outCirc), -200, 'tiny', -1000, 'tinyz'}
		end
	end

	for i=0,3 do
		ease 
		{172 - 0.5+i/2, 1, inOutExpo, 100, 'reverse'..i}
		{174 - 0.5+i/4, 1, inOutExpo, 0, 'reverse'..i}
	end

	mod_outin(175, 1, 1, 0, 'audiozoommult')
	mod_outin(175, 1, 1, 1.5, 'allzoom')
	mod_outin(175, 1, 0, -10000, 'tinyz')
	mod_outin(175, 1, 0, -1000, 'z')

	ease 
	{188-2, 4, inOutCirc, 180, 'rr_x'}
	{191-0.5, 1, inOutBack, -12.25, 'rr_z', plr=1}
	{191-0.5, 1, inOutBack, 12.25, 'rr_z', plr=2}

	aux 'scrollrotatemult'
	set {192, 1, 'scrollrotatemult'}
	func {192, 24, function(beat, p) 
		for pn=1,2 do
			p[pn].rr_z = math.cos( beat/4*math.pi )*12.25*(pn*2-3)*p[1].scrollrotatemult
		end
	end}

	ease 
	{204-0.5, 1, inOutCirc, 0, 'scrollrotatemult'}
	{208-0.5, 1, inOutCirc, 1, 'scrollrotatemult'}

	mod_outin(204, 1, 0, 100, 'brake')
	mod_outin(205, 1, 0, 100, 'brake')
	mod_outin(206, 2, 0, 100, 'brake')

	swap {204-0.5, 1, inOutCirc, 'rudl'}
	swap {205-0.5, 1, inOutCirc, 'ldur'}

	local slswap = {[0] = 'ldur', 'ludr'}
	for i=0,7 do
		swap {206-0.125+i/4, 0.25, inOutCirc, slswap[(i+1)%2]}
	end

	set {216, 0, 'orient'}

	ease 
	{206, 2, linear, 1.5, 'allzoom'}
	{206, 2, inExpo, 1, 'allzoom'}

	{205, 1, inCirc, 0, 'audiozoommult'}
	{207, 1, outCirc, 1, 'audiozoommult'}

	-- add
	-- {216, 4, outSine, 360*3, 'rr_y'}
	-- {216, 7, inCubic, 360*5, 'rr_y'}

	-- ease {223-0.5, 1, inOutExpo, 0, 'rr_z'}

	add 
	{216, 7, inQuad, -7.5, 'pscroll'}
	{223, 1, outExpo, -0.5, 'pscroll'}

	for i,v in ipairs {184, 184.5, 184.75, 185, 185.25, 185.5, 186} do
		local m = v==186 and 0 or i%2*2-1
		ease {v-0.5, 1, inOutCirc, 20*m, 'cross', -10*m, 'reverse'}
	end

	ease 
	{185.25-0.25, 0.5, inOutCirc, 70, 'zoomy', 130, 'zoomx'}
	{185.5-0.25, 0.5, inOutCirc, 100, 'zoomy', 100, 'zoomx'}

	for i=0,6 do
		ease 
		{186+i*0.75 - 0.5, 1, inOutCirc, 125, 'invert'}
		{186.5+i*0.75 - 0.5, 1, inOutCirc, 0, 'invert'}
	end
	ease {191-0.5, 1, inOutCirc, 0, 'invert', 0, 'confusionzoffset'}

	ease {183, 1, inCirc, 0, 'audiozoommult'}
	ease 
	{191, 0.5, outCirc, 1.5, 'allzoom'}
	{191.5, 0.5, inExpo, 1, 'allzoom'}
	ease {192, 4, outExpo, 1, 'audiozoommult'}

	mod_outin(188.0, 1, 0, 75, 'skewy')
	mod_outin(189.0, 0.5, 0, 25, 'skewx')
	mod_outin(189.5, 1, 0, -75, 'skewy')
	mod_outin(190.5, 0.5, 0, -25, 'skewx')

	-- mod_outin(188.0, 1, 0, -60, 'noteskewy')
	-- mod_outin(189.0, 0.5, 0, -25, 'noteskewx')
	-- mod_outin(189.5, 1, 0, 60, 'noteskewy')
	-- mod_outin(190.5, 0.5, 0, 25, 'noteskewx')

	ease 
	{188-0.5, 1, inOutCirc, 60, 'skewy', -60, 'noteskewy'}
	{189-0.5, 1, inOutCirc, 0, 'skewy', 0, 'noteskewy', 25, 'skewx', -25, 'noteskewx'}
	{189.5-0.5, 1, inOutCirc, -60, 'skewy', 60, 'noteskewy', 0, 'skewx', 0, 'noteskewx'}
	{190.5-0.5, 1, inOutCirc, 0, 'skewy', 0, 'noteskewy', -25, 'skewx', 25, 'noteskewx'}
	{191-0.5, 1, inOutCirc, 0, 'skewy', 0, 'noteskewy', 0, 'skewx', 0, 'noteskewx'}

	---- choir quire
	func {224, function() 
		for pn=1,#scroll_prx do
			scroll_prx[pn]:hidden(1)
		end

		for pn=1,2 do
			PP[pn]:x(0)
			PP[pn]:x2(0)
		end
	end}
	func {224, 4, outExpo, 0, 1, function(a) 
		scrollcover_l:cropright(a) scrollcover_r:cropleft(a) 
		scrollcover_l_stripe:cropright(a) scrollcover_r_stripe:cropleft(a) 
		scrollcover_l_shine:cropright(a) scrollcover_r_shine:cropright(a) 
	end}

	reset {224, exclude={'xmodmult', 'y', 'bgzoom', 'bgy', 'audiozoommult', 'audioheightmult', 'arrowpath', 'arrowpathsize', 'allzoom', 'rr_x', 'attenuatex', 'audiocircleradius', 'bumpyxperiod', 'bumpyx', 'bumpyxoffset'}}

	ease 
	{216, 7, inOutCubic, 0, 'rr_z', 0, 'rr_x', -64, 'y'}
	{224, 16, outCirc, 0, 'audiozoommult', 0, 'audioheightmult', 1, 'bgzoom', 123, 'bgy'}
	{223, 1, inQuad, 0, 'arrowpath', 0, 'arrowpathsize'}

	set {224, 25, 'arrowpathdrawsizeback'}

	---- mask color mask thats what the mask is
	reddisplay_sprite:SetTexture( mask_aft:GetTexture() )
	greendisplay_sprite:SetTexture( mask_aft:GetTexture() )
	bluedisplay_sprite:SetTexture( mask_aft:GetTexture() )

	reddisplay_sprite:GetShader():uniformTexture('samplerRed', redsource_aft:GetTexture())
	greendisplay_sprite:GetShader():uniformTexture('samplerGreen', greensource_aft:GetTexture())
	bluedisplay_sprite:GetShader():uniformTexture('samplerBlue', bluesource_aft:GetTexture())

	reddisplay_sprite:GetShader():uniformTexture('samplerMask', masktexture_aft:GetTexture())
	greendisplay_sprite:GetShader():uniformTexture('samplerMask', masktexture_aft:GetTexture())
	bluedisplay_sprite:GetShader():uniformTexture('samplerMask', masktexture_aft:GetTexture())
	
	local function lerp(v0, v1, t)
		return v0*(1-t)+v1*t
	end
	-- local function audiointerp(c, n)
	-- 	local value
	-- 	local index = n+2
	-- 	if audioData[c][index] then
	-- 		value = audioData[c][index]
	-- 	else
	-- 		local lowval = audioData[c][math.floor(index)]
	-- 		local highval = audioData[c][math.ceil(index)] or 0.5

	-- 		value = lerp(lowval, highval, n)
	-- 	end

	-- 	return value
	-- end

	audiocircle:SetDrawMode('Fan')
	audiocircle:SetNumVertices(barNumber)
	audiocircle:diffuse(1,0,0,1)

	audiocircle_linefill:SetDrawMode('Fan')
	audiocircle_linefill:SetNumVertices(barNumber)
	audiocircle_linefill:diffuse(1,1,1,1)

	audiocircle_linemask:SetDrawMode('Fan')
	audiocircle_linemask:SetNumVertices(barNumber)
	audiocircle_linemask:diffuse(0,1,0,1)

	audiocircle:rotationz(-120)
	audiocircle_linefill:rotationz(-120)
	audiocircle_linemask:rotationz(-120)

	audiocircle_linemask:zwrite(1)
	audiocircle_linemask:blend('noeffect')

	audiocircle_linefill:ztest(1)

	aux 'audiocircleradius'
	func {223, 128, function(beat, poptions) 
		local current = math.floor(beat*12)
		if current<1 then current=1 end
		if current>#audioData then current=#audioData end

		local radius = 200 * poptions[1].audiocircleradius
		local push = 50 * poptions[1].audiocircleradius

		-- print(poptions[1].audiocircleradius, push)

		for i=0,barNumber-1 do
			local value = inQuart(audioData[current][i+2])
			-- print(audiointerp(current, i/3))

			-- if i==1 then print(math.sin((math.pi*2)/barNumber*i)) end

			audiocircle:SetVertexPosition( i, math.cos((math.pi*2)/barNumber*i) * radius/2 + math.cos((math.pi*2)/barNumber*i)*value*push, math.sin((math.pi*2)/barNumber*i) * radius/2 + math.sin((math.pi*2)/barNumber*i)*value*push, 0 )
			audiocircle_linefill:SetVertexPosition( i, math.cos((math.pi*2)/barNumber*i) * radius/2*0.9 + math.cos((math.pi*2)/barNumber*i)*value*push, math.sin((math.pi*2)/barNumber*i) * radius/2*0.9 + math.sin((math.pi*2)/barNumber*i)*value*push, 0 )
			audiocircle_linemask:SetVertexPosition( i, math.cos((math.pi*2)/barNumber*i) * radius/2*0.89 + math.cos((math.pi*2)/barNumber*i)*value*push, math.sin((math.pi*2)/barNumber*i) * radius/2*0.89 + math.sin((math.pi*2)/barNumber*i)*value*push, 0 )
		end
	end}
	func {588, 128, function(beat, poptions) 
		local current = math.floor(beat*12)
		if current<1 then current=1 end
		if current>#audioData then current=#audioData end

		local radius = 200 * poptions[1].audiocircleradius
		local push = 50 * poptions[1].audiocircleradius

		-- print(poptions[1].audiocircleradius, push)

		for i=0,barNumber-1 do
			local value = inQuart(audioData[current][i+2])
			-- print(audiointerp(current, i/3))

			-- if i==1 then print(math.sin((math.pi*2)/barNumber*i)) end

			audiocircle:SetVertexPosition( i, math.cos((math.pi*2)/barNumber*i) * radius/2 + math.cos((math.pi*2)/barNumber*i)*value*push, math.sin((math.pi*2)/barNumber*i) * radius/2 + math.sin((math.pi*2)/barNumber*i)*value*push, 0 )
			audiocircle_linefill:SetVertexPosition( i, math.cos((math.pi*2)/barNumber*i) * radius/2*0.9 + math.cos((math.pi*2)/barNumber*i)*value*push, math.sin((math.pi*2)/barNumber*i) * radius/2*0.9 + math.sin((math.pi*2)/barNumber*i)*value*push, 0 )
			audiocircle_linemask:SetVertexPosition( i, math.cos((math.pi*2)/barNumber*i) * radius/2*0.89 + math.cos((math.pi*2)/barNumber*i)*value*push, math.sin((math.pi*2)/barNumber*i) * radius/2*0.89 + math.sin((math.pi*2)/barNumber*i)*value*push, 0 )
		end
	end}

	---- audio circle mod
	func {223, 'audiocircle_con:hidden', 0}
	func {223, 'PP[3]:hidden', 0}

	ease {224-1, 2, inOutCirc, 0.5, 'audiocircleradius'}

	for i=0,3 do
		add 
		{224+i*8, 4, outCirc, 0.5, 'audiocircleradius'}
		{228+i*8, 4, inCirc, -0.4, 'audiocircleradius'}
	end

	func {223, 'P[3]:SetAwake', true}
	func {223, 'P[3]:SetInputPlayer', 0}

	-- reusing my own unfinished modfile code again
	plr=3

	set {122, 200, 'splinextype', 200, 'splineztype'}
	set {124, 50, 'drawsize'}

	aux {'r_spread', 'r_rotate'}

	func {224, 33, function(beat, poptions) 
		local spread = poptions[3].r_spread
		local rotate = poptions[3].r_rotate

		local sec = math.floor((beat-224)/8)%2

		local p = P[3]
		
		for c=0,3 do
			-- local mult = (1-(c%2))/2
			-- if c<2 then mult=-mult mult=mult-0.5 end
			-- if c>1 then mult=0.5-mult mult=mult+0.5 end
			local mults = {-1, -0.5, 0.5, 1}
			local mult = mults[c+1]

			-- if c==1 or c==2 then
			local cmults = {0,2,0,-2}
			if sec==1 then cmults = {2, 0, -2, 0} end

			local czmult = {1,-1,1,-1}
			local cm = cmults[c+1]
			local cz = czmult[c+1]

			p:SetXSpline(0, c, spread*mult + (math.cos(rotate/2*math.pi + math.pi)+1)/2*(spread+100) * cm, 0, -1)
			p:SetZSpline(0, c, math.sin(rotate/2*math.pi + math.pi)*100 * cm * cz, 0, -1)

				-- if pn==3 then
				-- 	p:SetRotYSpline(0, c, rotate*(math.pi*100), 0, -1)
				-- end
			-- else
			-- 	p:SetXSpline(0, c, spread*mult, 0, -1)
			-- end
			p:SetXSpline(1, c, 0, 700, -1)
			p:SetZSpline(1, c, 0, 700, -1)
			p:SetRotYSpline(1, c, 0, 700, -1)
		end
	end}

	func {224-0.5, 1, inOutCirc, 0, 1, function(a) redreceptorpeek:zoomy(a) end}
	func {256-0.5, 1, inOutCirc, 1, 0, function(a) redreceptorpeek:zoomy(a) end}

	set {224, 11000, 'drunkspeed'}
	for i=0,3 do
		-- local mult = (i%2*2-1)

		ease 
		{224+i*8, 4, outCirc, 1.5 + 0.5*i, 'r_rotate'}
		{228+i*8, 4, inCirc, 0, 'r_rotate'}

		add 
		{224+i*8, 4, outCirc, 100, 'shrinklinear'}
		{228+i*8, 4, inCirc, -100, 'shrinklinear'}

		ease 
		{224+i*8, 8, flip(outQuad), 150, 'drunk'}
	end

	ease {224, 32, linear, 200, 'dizzy'}
	ease {256-1, 2, inOutExpo, 0, 'tiny', 0, 'dizzy'}

	plr={1,2,3}

	ease {223, 2, inOutExpo, -64, 'y'}
	set {224, 25, 'drawsize'}

	set {223, 1000, 'bumpyxperiod'}
	for i=0,3 do
		ease 
		{223+i*8, 1, inExpo, 100, 'bumpyx', -300, 'attenuatex'}
		{224+i*8, 8, outCubic, 0, 'bumpyx', 0, 'attenuatex'}
		add {224+i*8, 8, outQuad, 1000, 'bumpyxoffset'}

		for r=0,6 do
			ease 
			{224+r+i*8, 1, inExpoSnap, -200, 'parabolay', -100, 'tiny'}
			{225+r+i*8, 4, outExpo, 0, 'parabolay', 0, 'tiny'}
		end
	end

	-- set {255, 200, 'splinextype'}
	-- ease {256-0.5, 1, inOutCirc, 100, 'arrowpath', 500, 'arrowpathsize'}

	-- aux 'mbendmult'
	-- func {256, 32, function(beat, poptions) 
	-- 	local mult = poptions[1].mbendmult
	-- 	for pn=1,3 do
	-- 		local p = P[pn]
	-- 		-- if pn==3 then mult=-mult end
	-- 		local adds = {[0]=300, 100, -100, -300}

	-- 		for i=0,31 do
	-- 			for c=0,3 do
	-- 				-- p:SetXSpline(i, c, (inOutQuart(i/31)*200-100) * mult + adds[c]*inCubic(i/40), (i/31)*425, -1)
	-- 				p:SetXSpline(i, c, (inOutQuart(i/31)*200-100) * mult, (i/31)*425, -1)
	-- 			end
	-- 		end
	-- 	end
	-- end}

	aux 'redaux'
	for i,v in ipairs {256, 256.75, 257.5, 258, 258.75, 259.5, 264, 264.75, 265.5, 266, 266.75, 267.5} do
		-- ease {v, 1, outElastic, 0.75*(i%2*2-1), 'mbendmult'}
		ease {v, 4.5, flip(outExpo), -400, 'tiny', -6000, 'tinyz', plr=3}
		add {v, 4.5, outCirc, 314, 'confusionzoffset', plr=3}

		add {v, 1, flip(outCirc), 1, 'audiocircleradius'}

		local m = (i%2*2-1)

		func {v, 0.5, outCirc, 1, 0, function(a) redsource_af:SetVanishX( scx + 1000*a*m ) end}
		-- func {v, 4, outExpo, 1, 0, function(a) circlescroll:diffusealpha(a) redgradient:diffusealpha(a) end}
		
		ease {v, 3, flip(outExpo), 1, 'redaux'}
	end

	func {256, 32, function(beat, p) 
		local r = p[1].redaux

		if beat<272 then
			circlescroll:diffusealpha(r*0.5)
		end
		redgradient:diffusealpha(r)

		local rx = math.random(-16,16)
		local ry = math.random(-16,16)

		redsource_af:x2( r*rx )
		redsource_af:y2( r*ry)

		audiocircle_linefill:xy2( -r*rx, -r*ry )
		audiocircle_linemask:xy2( -r*rx, -r*ry )
		redgradient:xy2( -r*rx, -r*ry )
	end}

	-- ease {256-0.5, 1, inOutCirc, 100, 'flip', plr=3}
	-- ease {260, 4, outCubic, math.pi*100, 'confusionoffset', plr=3}

	-- set {256, 0, 'drunkspeed', 500, 'drunkspacing'}

	for i=0,1 do
		add 
		{256+i*8, 4, inOutSine, -0.5, 'audiocircleradius'}
		{260+i*8, 4, inOutSine, 0.5, 'audiocircleradius'}
	end

	plr=nil

	mod_outin(260, 4, 1, 1.25, 'allzoom')
	mod_outin(260, 4, 0, 25, 'reverse')
	mod_outin(260, 4, 0, 70, 'drawsize')

	ease 
	{260.5-0.5, 1, inOutQuad, -45, 'rotationx'}
	{260.5, 3.5, inQuad, 0, 'rotationx'}

	for i,v in ipairs {260.5, 261.5, 262, 262.5, 263, 263.5} do
		ease 
		{v-0.5, 0.5, inExpoSnap, 50, 'brake', -1000, 'tinyz'}
		{v, 1, outQuad, 0, 'brake', 0, 'tinyz'}

		ease {v-0.5, 1, inOutExpo, 100 * (i%2*2-1) * (1 - i/12), 'drunk'}
	end
	ease {264-0.5, 1, inOutExpo, 0, 'drunk'}

	func {256-1, 2, inOutExpo, 0, 1, function(a) 
		redexpand_1:zoomto( sw*a, 200 )

		squareloop_1:cropleft( 1*(1-a) )
		squareloop_2:cropright( 1*(1-a) )

		redstripe_l:cropright(1*(1-a))
		redstripe_r:cropleft(1*(1-a))
	end}
	func {260-0.5, 1, inOutExpo, 1, 0, function(a) 
		redexpand_1:zoomto( sw*a, 200 )

		squareloop_1:cropleft( 1*(1-a) )
		squareloop_2:cropright( 1*(1-a) )

		redstripe_l:cropright(1*(1-a))
		redstripe_r:cropleft(1*(1-a))
	end}
	func {264-1, 2, inOutExpo, 0, 1, function(a) 
		redexpand_1:zoomto( sw*a, 200 )

		squareloop_1:cropleft( 1*(1-a) )
		squareloop_2:cropright( 1*(1-a) )

		redstripe_l:cropright(1*(1-a))
		redstripe_r:cropleft(1*(1-a))
	end}
	func {268-0.5, 1, inOutExpo, 1, 0, function(a) 
		redexpand_1:zoomto( sw*a, 200 )

		squareloop_1:cropleft( 1*(1-a) )
		squareloop_2:cropright( 1*(1-a) )

		redstripe_l:cropright(1*(1-a))
		redstripe_r:cropleft(1*(1-a))
	end}

	for i=0,3 do
		ease {256-0.5 + i*4, 1, inOutCirc, (i+1)%2, 'audioheightmult', i%2 * 123, 'bgy', (i+1)%2, 'audiozoommult', (i+1)%2 * 100, 'tiny'}
	end
	ease {268, 4, inOutCubic, 1, 'audioheightmult', 123*2, 'bgy', 2, 'bgzoom', 1, 'audiozoommult'}
	-- {260-0.5, 1, inOutCirc, 0, 'audioheightmult', 123, 'bgy'}
	-- {264-0.5, 1, inOutCirc, 1, 'audioheightmult', 0, 'bgy'}
	-- {268-0.5, 1, inOutCirc, 0, 'audioheightmult', 123, 'bgy'}
	-- {272-0.5, 1, inOutCirc, 1, 'audioheightmult', 0, 'bgy'}

	-- func {0, 999, function(beat, poptions) print(poptions[1].bgy) end}
	func {268, 'redsidequad_1:hidden', 1}
	func {268, 'redsidequad_2:hidden', 1}

	ease {268, 4, outQuad, 0, 'audiocircleradius'}

	func {266, 6, outQuad, 1, 0, function(a) redfullprestripe:cropbottom(a) redfullstripe:cropbottom(a) end}
	func {266, 6, outQuad, -8, 0, function(a) 
		redfullprestripe:customtexturerect(0, -a, 1, 16-a)
		redfullstripe:customtexturerect(0, -a, 1, 16-a)
	end}
	func {272, 286-272, inCirc, 0, 50, function(a) 
		redfullprestripe:customtexturerect(0, -a, 1, 16-a)
		redfullstripe:customtexturerect(0, -a, 1, 16-a)
	end}

	func {272, 286-272, outSine, 0, 1, function(a) 
		redfullprestripe:diffusealpha(outSine(1-a))
		redfullstripe:diffusealpha(a)
	end}

	for i=0,15*3 do
		local v = 272+i/2
		if i>=16 then v = 280+(i-16)/4 end
		if i>=32 then v = 284+(i-32)/8 end
		
		ease {v, 2, flip(outExpo), 1, 'redaux'}
		ease {v, 2, flip(outExpo), -200, 'tiny', plr={1,2,3}}
	end
	-- func {272, 14, inOutQuad, 0, 0.1, function(a) redfullstripe:skewy(a) end}

	ease {268, 4, inOutCubic, 100, 'flip', math.pi*100, 'confusionoffset', 10, 'stealth', plr=3}
	ease {268, 18, inCubic, 360*8, 'rr_y', plr={1,2,3}}

	ease 
	{272, 14, inOutQuad, -20, 'rr_z', plr={1,2}}
	{272, 14, inOutQuad, 20, 'rr_z', plr=3}

	for i=0,15 do
		ease {272-0.25 + i/2, 0.5, inOutExpo, 10 + 40*((i+1)%2), 'stealth', plr=3}
	end
	for i=0,23 do
		ease {280-0.125 + i/4, 0.25, inOutExpo, 10 + 40*((i+1)%2), 'stealth', plr=3}
	end

	---- me when i switch it up
	func {286-1, 2, inOutCirc, 1, 0, function(a) 
		for _,v in ipairs{ switchit_green, switchit_blue, switchit_green_scroll, switchit_blue_scroll } do
			v:croptop(a*0.5)
			v:cropbottom(a*0.5)

			v:fadetop(outCirc(a)*0.2)
			v:fadebottom(outCirc(a)*0.2)
		end
	end}

	func {287, 'redsource_af:hidden', 1}
	for i=1,3 do
		if i==3 then func {287, 'P['.. i ..']:SetAwake', false} end
		func {287, 'PP['.. i ..']:hidden', 1}
	end
	for i=4,5 do
		func {285, 'P['.. i ..']:SetAwake', true}
		func {285, 'P['.. i ..']:SetInputPlayer', i-4}
		func {285, 'PP['.. i ..']:hidden', 0}
	end

	-- func {288, 336-288, linear, 0, 1, function(a) 
	-- 	switchit_green:faderight(a*0.75)
	-- 	switchit_blue:fadeleft(a*0.75)

	-- 	switchit_green:cropright(0.5 - a*0.25)
	-- 	switchit_blue:cropleft(0.5 - a*0.25)
	-- end}
	
	-- audio Bar
	local function barDrawFunctionParent(r,g,b)
		local beat = GAMESTATE:GetSongBeat()

		local current = math.floor(beat*12)
		if current<1 then current=1 end
		if current>#audioData then current=#audioData end

		for i=1,barNumber,4 do
			local value = audioData[current][i+1]
			value = inQuad(value)
			
			bar:valign(1)

			bar:x( (i-1) * (sh/barNumber) - (sh/barNumber) * 18 )
			bar:y( scy )
			bar:zoomto( sh/barNumber*4-16, sh*0.5 * value * m_audioheightmult )

			bar:diffuse(r,g,b,1)
			
			-- bar:croptop(0.1)
			-- bar:fadetop(0.2)

			local xval = (i-1) * (sh/barNumber) - (sh/barNumber) * 18
			if i>4 and i<barNumber-4 then
				bar:Draw()
			end
		end
	end

	local barDrawFunctionG = function()
		barDrawFunctionParent(0,1,0)
	end
	local barDrawFunctionB = function()
		barDrawFunctionParent(0,0,1)
	end

	audiobars_green:SetDrawFunction(barDrawFunctionG)
	audiobars_blue:SetDrawFunction(barDrawFunctionB)
	
	func {288, 'audiobars_green:hidden', 0}
	func {288, 'audiobars_blue:hidden', 0}

	ease 
	{288, 0, instant, 0, 'audioheightmult'}
	{288, 1, outCirc, 1.5, 'audioheightmult'}

	for pn=4,5 do
		local pm = (pn*2-9)

		plr = pn

		set {223, 1000, 'bumpyxperiod'}
		-- ease 
		-- {223+i*8, 1, inExpo, 100, 'bumpyx', -300, 'attenuatex'}
		-- {224+i*8, 8, outCubic, 0, 'bumpyx', 0, 'attenuatex'}

		for i=0,45 do
			local m = i%2*2-1
			local fmult = i>0 and 2 or 1

			-- ease {288-0.5 + i, 0.5, inExpo, 100*m*pm, 'bumpyx'}
			-- ease {288 + i, 1, outCirc, 0, 'bumpyx', 0, 'drunk'}

			-- add {288+i, 1, outQuad, 250*math.pi, 'bumpyxoffset'}

			if (not (i>=12 and i<16)) and (not (i>=24 and i<32)) then
				add 
				{288-0.25 + i, 0.5, inOutCirc, 2.5*m*pm*fmult, 'reverse'}
				{288 + i, 2, outElastic, 2.5*m*pm*fmult, 'reverse'}

				ease 
				{288+i, 2, flip(outCirc), -200, 'tiny'}
				{288+i, 2, flip(outQuad), 100*m*pm, 'tipsy'}

				if i>=32 then
					ease {288-0.5+i, 1, inOutCirc, (i+(pn-4))%2*100, 'invert'}
				end
			end
		end

		ease {334, 2, inOutCubic, 0, 'reverse'}		

		ease 
		{300-0.5, 1, inOutCirc, 150*0.64, 'x'}
		{302-0.5, 1, inOutCirc, -150*0.64, 'x'}
		{303, 1, inCubic, 0, 'x'}

		mod_outin(300.75, 1.25, 0, -300, 'tiny')
		mod_outin(302.75, 1.25, 0, -300, 'tiny')
		mod_outin(300.75, 1.25, 0, -1000, 'tinyz')
		mod_outin(302.75, 1.25, 0, -1000, 'tinyz')
		if pn==4 then
			mod_outin(300.75, 1.25, 0, 50, 'stealth')
		end
		if pn==5 then
			mod_outin(302.75, 1.25, 0, 50, 'stealth')
		end

		add 
		-- {300.75,     0.5, outCirc, 60*pm, 'rr_x'}
		-- {300.75+0.5, 0.75, inCirc, 120*pm, 'rr_x'}
		-- {302.75-0.5, 1, inOutCubic, 360*pm, 'rr_x'}
		{300.75-0.5, 1.25, inOutCirc, 180, 'rr_z'}
		{302.75-0.5, 1.25, inOutCirc, 180, 'rr_z'}

		ease {334-0.5, 1, inOutCirc, 0, 'invert'}

		-- more accents
		set {291, -100, 'drunkzspeed', 1500, 'drunkzoffset'}

		ease 
		{292-0.5, 1, inOutCubic, 150, 'zoomx', 1000, 'drunkz'}
		{293-0.5, 1, inOutCubic, 100, 'zoomx', 0, 'drunkz'}

		add {292-0.5, 1, inOutCubic, 1000, 'drunkzoffset'}

		for i=0,15 do
			acc {293+i/16, math.pi*200/4, 'confusionoffset'}
		end
		set 
		{293, 75, 'stealth'}
		{294, 0, 'stealth'}

		for i=0,7 do
			add {298+i/4, 0.5, instant, -8, 'flip', math.pi*200/8, 'confusionoffset'}
		end
		ease {300-0.5, 1, inOutExpo, 0, 'flip'}

		ease 
		{309-0.5, 1, inOutCubic, 150, 'zoomy', 1000, 'drunkz'}
		{310-0.5, 1, inOutCubic, 100, 'zoomy', 0, 'drunkz'}

		set {308, 1500, 'drunkzoffset'}
		add {309-0.5, 1, inOutCubic, 1000, 'drunkzoffset'}

		for i=0,15 do
			acc {309+i/16, math.pi*200/4, 'confusionoffset'}
		end
		set 
		{309, 75, 'stealth'}
		{310, 0, 'stealth'}
		
		ease 
		{310-0.5, 1, inOutCubic, 50*pm, 'skewy', -50*pm, 'skewx'}
		{311-0.5, 1, inOutCubic, 0, 'skewy', 0, 'skewx'}

		if pn==5 then
			ease {312-0.5, 1, inOutCirc, 180, 'rr_x'}
		end

		ease {316-2, 4, inOutCirc, 100, 'centered', 1.5, 'xmod', 50, 'zoom'}

		add {318, 1, inCirc, 360, 'rr_x'}
		set {319, 0, 'rr_x'}
		add {319, 1, outCirc, 360, 'rr_x'}

		ease {320-1, 2, inOutCirc, 0, 'centered', 1.5, 'xmod', 100, 'zoom'}
		
		ease 
		{322-0.5, 1, inOutCubic, 50, 'zoom', -7500, 'tinyz', 100, 'bumpy'}
		{323-0.5, 1, inOutCubic, 100, 'zoom', 0, 'tinyz', 0, 'bumpy'}

		{323-0.5, 1, inOutCubic, 75, 'zoomy', 125, 'zoomx'}
		{324-0.5, 1, inOutCubic, 100, 'zoomy', 100, 'zoomx'}

		set {321, 800, 'bumpyperiod'}
		-- add {322-0.5, 1, inOutCubic, 1000, 'drunkzoffset'}

		for i=0,15 do
			acc {322+i/16, math.pi*200/4, 'confusionoffset'}
		end
		set 
		{322, 75, 'stealth'}
		{323, 0, 'stealth'}

		add {330, 2, inOutQuad, math.pi*200*4, 'confusionoffset'}

		-- set {331, 600, 'centered2', -600, 'movey'}
		-- add {332, 2, inOutQuad, -600, 'centered2', 600, 'movey'}
		set{331, 800, 'bumpyxperiod'}
		for i=0,3 do
			ease {332-0.25 + i/2, 0.5, inOutCubic, 250 * (i%2*2-1), 'bumpyx'}
			ease {332 + i/2, 0.5, flip(outExpo), -200, 'tinyx'}
		end
		ease {334-0.25, 0.5, inOutCubic, 0, 'bumpyx'}

		ease {335-0.5, 1, inOutSine, 300, 'zoomx', 200, 'zoomy'}
		ease {336-0.5, 1, inOutCirc, 100, 'zoomx', 100, 'zoomy'}

		for i=0,31 do
			acc {334+i/16, math.pi*200/4, 'confusionoffset'}
		end
		set 
		{334, 75, 'stealth'}
		{336, 0, 'stealth'}

		ease 
		{334-0.5, 1, inOutCubic, 1000, 'drunkz', -500, 'z', -5000, 'tinyz'}
		{336-0.5, 1, inOutCubic, 0, 'drunkz', 0, 'z', 0, 'tinyz'}

		set {333, 1500, 'drunkzoffset', -80, 'drunkzperiod'}
		add {334-0.5, 2, inOutCubic, 1000, 'drunkzoffset'}

		set {336, 35, 'drawsize', 0, 'flip'}
		ease {336-0.5, 1, inOutCirc, 0, 'zoomx', 180, 'rotationz'}

		-- add 
		-- {336, 6, linear, -45 * pm, 'rr_z', 67.5*pm, 'x'}
		-- {336-1, 2, inOutCirc, -15 * pm, 'rr_z', 67.5/3*pm, 'x'}
		-- {340-1, 2, inOutCirc, -15 * pm, 'rr_z', 67.5/3*pm, 'x'}
		-- {341-1, 2, inOutCirc, -15 * pm, 'rr_z', 67.5/3*pm, 'x'}

		-- add {342, 2, inOutCirc, 45, 'rr_z'}

		-- ease {342-1, 2, inOutExpo, 135*pm, 'x'}

		plr = nil
	end

	-- ease {336, 6, linear, 0.2, 'swaddzoom'}
	-- ease {342, 2, inOutCirc, 0, 'swaddzoom'}
	
	-- func {342, function() 
	-- 	switchit_green:zoomto(sw*2,sh*2)
	-- 	switchit_blue:zoomto(sw*2,sh*2)
	-- end}
	-- func {342, 2, inOutCirc, 0, 45, function(a) 
	-- 	switchit_green:rotationz(a)
	-- 	switchit_blue:rotationz(a)
	-- end}

	set {288, 1, 'swmult'}

	ease 
	{299, 1, inCirc, 0, 'swmult'}
	{304, 2, outCirc, 1, 'swmult'}

	{312-1, 2, inOutCirc, 0, 'swmult'}
	{320-1, 2, inOutCirc, 1, 'swmult'}

	{334-1, 2, inOutCirc, 0, 'swmult'}

	definemod {'swcrop', function(c) 
		switchit_green:cropright(1-c)
		switchit_blue:cropleft(c)

		switchit_green_scroll:cropright(1-c)
		switchit_blue_scroll:cropleft(c)

		audiobars_green:x(scy - (0.5-c)*sw)
		audiobars_blue:x(-scy - (0.5-c)*sw)
	end}
	setdefault {0.5, 'swcrop'}

	aux 'swmult'
	func {288, 48, function(beat, p) 
		local per = (beat-288)/(46)
		if beat>334 then per = 1-inOutCubic((beat-334)/2) end

		local swmult = p[1].swmult

		for pn=4,5 do
			local pm = (pn*2-9)

			p[pn].reverse = p[pn].reverse*swmult

			if not (beat>299.75 and beat<304) and (beat<335.5) then
				p[pn].x = math.sin(beat/4*math.pi)*64*pm * per * swmult
				p[pn].rotationz = math.cos(beat/4*math.pi)*10*pm * per * swmult

				p[pn].swcrop = 0.5 + math.sin(beat/4*math.pi)*0.1 * per * swmult
			end
		end
	end}
	-- set {288, 0.4, 'swcrop'}

	---- diagonal line stuff
	switchit_diag_green:rotationz(45)
	switchit_diag_blue:rotationz(-45)

	switchit_diag_green:hidden(1)
	switchit_diag_blue:hidden(1)

	local diagonalDrawParent = function(actor, r,g,b, amt)
		local num=31
		for i=0,num-1 do
			actor:x(i*40 - 40*(num/2))
			actor:zoomto(25*amt,sh*2)

			actor:diffuse(r,g,b,1)

			actor:Draw()
		end
	end

	local m_diagg_amt = 0
	local m_diagb_amt = 0
	aux 'diagg_amt'
	aux 'diagb_amt'
	func {288, 256, function(beat, p) 
		m_diagg_amt = p[1].diagg_amt
		m_diagb_amt = p[1].diagb_amt

		-- print(m_diagg_amt)
	end}

	function diagg_draw() diagonalDrawParent(diagg, 0,1,0, m_diagg_amt) end
	function diagb_draw() diagonalDrawParent(diagb, 0,0,1, m_diagb_amt) end

	switchit_diag_green:SetDrawFunction(diagg_draw)
	switchit_diag_blue:SetDrawFunction(diagb_draw)

	----
	-- func {300-0.5, 1, inOutExpo, 0, 0.5, function(a) 
	-- 	switchit_blue_scroll:croptop(a) switchit_blue_scroll:cropbottom(a) 
	-- 	switchit_green_scroll:croptop(a) switchit_green_scroll:cropbottom(a) 
	-- end}
	-- func {304-0.5, 1, inOutExpo, 0.5, 0, function(a) 
	-- 	switchit_blue_scroll:croptop(a) switchit_blue_scroll:cropbottom(a) 
	-- 	switchit_green_scroll:croptop(a) switchit_green_scroll:cropbottom(a) 
	-- end}
	func {300-0.5, 1, inOutExpo, 1, 0, function(a) 
		switchit_blue_scroll:diffusealpha(a)
		switchit_green_scroll:diffusealpha(a)
	end}
	func {304-0.5, 1, inOutExpo, 0, 1, function(a) 
		switchit_blue_scroll:diffusealpha(a)
		switchit_green_scroll:diffusealpha(a)
	end}

	ease 
	{300-0.5, 1, inOutCirc, 0, 'audioheightmult', 0, 'swcrop'}
	{302-0.5, 1, inOutCirc, 0, 'audioheightmult', 1, 'swcrop'}
	{304-0.5, 1, inOutCirc, 1.5, 'audioheightmult', 0.5, 'swcrop'}

	{312-0.5, 1, inOutCirc, 0, 'audioheightmult', 1, 'swcrop'}
	{320-0.5, 1, inOutCirc, 1.5, 'audioheightmult', 1, 'swcrop'}

	mod_outin(300.75, 1.25, 0, 1.3, 'diagg_amt')
	mod_outin(302.75, 1.25, 0, 1.3, 'diagb_amt')

	func {300.75, 'switchit_diag_green:hidden', 0}
	func {300.75, 'switchit_diag_blue:hidden', 0}
	func {304, 'switchit_diag_green:hidden', 1}
	func {304, 'switchit_diag_blue:hidden', 1}

	definemod {'swaddzoom', function(a) 
		greensource_af:zoom(1+a)
		bluesource_af:zoom(1+a)
		masktexture_af:zoom(1+a)

		for i=1,#screenglare do
			screenglare[i]:basezoomx(1.02 - a*0.75)
			screenglare[i]:basezoomy(1.02 - a*0.75)
		end
	end}
	aux 'swaddvibrate'
	func {311, 8, function(beat, p) 
		local a = p[1].swaddvibrate

		local rx = math.random()*2-1
		local ry = math.random()*2-1

		greensource_af:xy2(rx*a, ry*a)
		bluesource_af:xy2(rx*a, ry*a)
		masktexture_af:xy2(rx*a, ry*a)

		for i=1,#screenglare do
			screenglare[i]:xy2(rx*-a, ry*-a)
		end	
	end}

	add 
	{312-0.5, 1, inOutCirc, 0.2, 'swaddzoom'}
	{312, 4, outQuad, 0.1, 'swaddzoom'}
	{316, 4, inQuad, -0.1, 'swaddzoom'}
	{320-0.5, 1, inOutCirc, -0.2, 'swaddzoom'}

	ease 
	{312-0.5, 1, inOutCirc, 10, 'swaddvibrate'}
	{316-0.5, 1, inOutCirc, 0, 'swaddvibrate'}

	func {312-0.5, 1, inOutExpo, 1, 0, function(a) 
		switchit_blue_scroll:diffusealpha(a)
		switchit_green_scroll:diffusealpha(a)
	end}
	func {320-0.5, 1, inOutExpo, 0, 1, function(a) 
		switchit_blue_scroll:diffusealpha(a)
		switchit_green_scroll:diffusealpha(a)
	end}
	func {336-0.5, 1, inOutExpo, 1, 0, function(a) 
		switchit_blue_scroll:diffusealpha(a)
		switchit_green_scroll:diffusealpha(a)
	end}

	-- glare
	for i=1,#screenglare do screenglare[i]:basezoomx(1.02) screenglare[i]:basezoomy(1.02) screenglare[i]:y(50) end
	for i=3,4 do screenglare[i]:rotationz(180) end
	crt_sprite:SetTexture( crt_aft:GetTexture() )

	func {285.5, 'crt_sprite:hidden', 0}
	func {286-0.5, 1, inOutQuad, 0, 0.7, function(a) crt_sprite:GetShader():uniform1f('amp', a) end}

	---- design stuff
	local function flickerin(beat, duration, ease, amtX, amtY, actor)
		local oldtime = 0
		local accum = 0
		local flicker = 0
		local flickerended = false
		func {beat, duration, ease, 1, 0, function(a) 
			local delta = GAMESTATE:GetSongTime() - oldtime
			oldtime = GAMESTATE:GetSongTime()

			accum = accum+delta
			if accum>=1/35 and not flickerended then
				flicker = 1-flicker
				actor:diffusealpha(flicker)

				if (GAMESTATE:GetSongBeat()-beat >= duration*0.3) then
					actor:diffusealpha(1)
					flickerended=true
				end

				accum=0
			end

			actor:x2(amtX*a)
			actor:y2(amtY*a)
		end}
	end

	local function hidedecor(b, a)
		local a=a
		func {b-0.5, 1, inOutCirc, 1, 0, function(alpha) 
			for i,v in ipairs(a) do
				decor[v]:diffusealpha(alpha)
			end
		end}
	end

	flickerin(288, 3, outExpo, 0, -50, decor[1])
	flickerin(296, 3, outExpo, 0, 50, decor[2])

	hidedecor(300, {1, 2})

	for i=3,4 do
		local i=i

		decor[i]:xy(-240,150)

		flickerin(304, 3, outExpo, 0, 50, decor[i])
		func {304, 4, outCirc, 0, -45, function(a) decor[i]:rotationz(a) end}
		func {308, 4, inCirc, -45, -90, function(a) decor[i]:rotationz(a) end}

		func {304, 8, linear, 10, -10, function(a) decor[i]:rotationz2(a) end}
	end

	flickerin(304, 2, outExpo, 0, 0, decor[5])

	func {304, 4, outCirc, -200, 0, function(a) decor[5]:y(a) end}
	func {308, 4, inCirc, 0, 200, function(a) decor[5]:y(a) end}

	hidedecor(312, {3,4,5})

	flickerin(320, 3, outExpo, 20, -20, decor[6])

	for i=7,8 do
		local i=i		
		flickerin(328, 3, outExpo, 0, -50, decor[i])
	end
	func {334, 2, inExpo, 0, 50, function(a) decor[8]:y(a) end}

	hidedecor(336, {6,8})
	func {336, 'decor[7]:hidden', 1}

	ease {334, 2, inOutCubic, 0, 'audioheightmult'}

	func {300.5, 'bloodtext:hidden', 0}
	func {302-0.5, 1, inOutCirc, 0, 1.3, function(a) bloodtext:cropleft(a) end}

	func {302.5, 'moontext:hidden', 0}
	func {304-0.5, 1, inOutCirc, 0, 1.3, function(a) moontext:cropright(a) end}
	
	-- segment labels
	flickerin(288, 3, outExpo, 0, 25, segment1label)
	func {300-0.5, 1, inOutCirc, 1, 0, function(alpha) 
		segment1label:diffusealpha(alpha)
	end}

	flickerin(304, 3, outExpo, 0, -25, segment2label)
	func {312-0.5, 1, inOutCirc, 1, 0, function(alpha) 
		segment2label:diffusealpha(alpha)
	end}

	flickerin(320, 3, outExpo, 0, 25, segment3label)
	func {336-0.5, 1, inOutCirc, 1, 0, function(alpha) 
		segment3label:diffusealpha(alpha)
	end}

	-- aaaaaaaaaaaaaa
	for _,v in ipairs(scream) do
		local v=v
		func {312, 1, outExpo, 1, 0, function(a) v:y(-sh*a) end}
		func {312, 4, linear, 0, 24, function(a) v:customtexturerect(0,0+a,1,8+a) end}
		func {315, 1, inExpo, 0, 1, function(a) v:y(sh*a) end}
	end	

	-- smiley
	func {316-0.5, 1, inOutCirc, 0, 1, function(a) 
		smeye_l:diffusealpha(a)
		smeye_r:diffusealpha(a)
		smmouth:diffusealpha(a)
	end}
	func {316, 4, inExpo, 0, 1.5, function(a) 
		smeye_l:x2(-250*a)
		smeye_r:x2(250*a)
		smmouth:zoomto( 80+500*a, 11 )
	end}
	func {320-0.5, 1, inOutCirc, 1, 0, function(a) 
		smeye_l:diffusealpha(a)
		smeye_r:diffusealpha(a)
		smmouth:diffusealpha(a)
	end}

	-------- Playfeld Mask
	
	func {338, 'audiobars_green:hidden', 1}
	func {338, 'audiobars_blue:hidden', 1}

	func {334, 'red_section_1:hidden', 1}
	func {334, 'redsource_af:hidden', 0}

	func {334, function() 
		local p = P[1]

		for c=0,3 do
			p:SetNumStealthGradientPoints(c,2)

			p:SetStealthGradientPoint(0, c, 0)
			p:SetStealthGradientPoint(1, c, 6)

			p:SetStealthGradientColor(0, c, 0,0,0,1)
			p:SetStealthGradientColor(1, c, 1,1,1,1)
		end
	end}

	plr={1,2}
	reset {334, exclude={'xmodmult', 'bgy', 'bgzoom'}}
	plr=nil

	ease {334, 1, linear, 123*2, 'bgy', 2, 'bgzoom'}

	peek_player:SetTarget( P[1]('NoteField') )
	mask_player:SetTarget( P[2]('NoteField') )

	set 
	{334, 0, 'zoom', 25, 'drawsize', -20, 'rr_z', 1.25, 'xmod'}
	{334, 50, 'stealth', plr=1}
	{334, 50, 'stealth', 1, 'stealthgr', plr=2}

	func {335, 'PP[1]:hidden', 0}
	func {335, 'mask_player:hidden', 0}

	ease {336-1, 2, inOutCirc, 100, 'zoom'}

	-- ease {336, 6, linear, -200, 'tiny', plr=2}
	add 
	{336, 6, linear, 20, 'rr_z'}
	{336-1, 2, inOutCirc, 20/3, 'rr_z'}
	{340-1, 2, inOutCirc, 20/3, 'rr_z'}
	{341-1, 2, inOutCirc, 20/3, 'rr_z'}

	{336-1, 2, inOutCirc, -50, 'tiny', plr=2}
	{340-1, 2, inOutCirc, -50, 'tiny', plr=2}
	{341-1, 2, inOutCirc, -50, 'tiny', plr=2}

	add 
	{336, 4, flip(outExpo), -200, 'tiny'}
	{340, 4, flip(outExpo), -200, 'tiny', -5000, 'tinyz'}
	{341, 4, flip(outExpo), -200, 'tiny', -5000, 'tinyz'}

	ease 
	{336-0.5, 1, inOutCirc, 200, 'drunkz'}
	{336, 6, linear, 100, 'drunk', -25, 'flip', 3000, 'drunkoffset', 3000, 'tipsyoffset'}
	{344-0.5, 1, inOutCirc, 0, 'drunk', 0, 'tipsy', 0, 'flip', 0, 'drunkz'}
	set {336, -100, 'drunkspeed', -100, 'tipsyspeed'}

	for i=0,23 do
		add {336+i/4, 0.5, outElastic, 400, 'drunkzoffset'}
	end

	ease 
	{335.5, 1, inOutCirc, 0, 'swcrop'}
	{343, 2, inOutCirc, 1, 'swcrop'}

	func {336, 'switchit_diag_green:hidden', 0}
	func {336, 'switchit_diag_blue:hidden', 0}

	-- ease {336, 6, linear, 1, 'diagg_amt'}
	-- ease {344, 4, linear, 1, 'diagb_amt'}

	-- set {334, 1200, 'dizzy', plr=2}
	
	-- testest:SetTexture( redsource_aft:GetTexture() )

	func {335, 'thinline_green:diffusealpha', 0.2}
	func {335, 'thinline_blue:diffusealpha', 0.1}

	func {336, 'wave_shader_green:hidden', 0}
	func {336, 2, outCubic, 0, 1, function(a) wave_shader_green:GetShader():uniform1f('sizemult', a) end}
	func {342, 2, linear, 1, 0, function(a) wave_shader_green:GetShader():uniform1f('sizemult', a) end}
	func {344, 'wave_shader_green:hidden', 1}

	func {336, 'thinline_green:hidden', 0}
	func {344, 'thinline_green:hidden', 1}

	func {344, 'wave_shader_blue:hidden', 0}
	func {344, 2, outCubic, 0, 1, function(a) wave_shader_blue:GetShader():uniform1f('sizemult', a) end}
	func {350, 2, inCirc, 1, 0, function(a) wave_shader_blue:GetShader():uniform1f('sizemult', a) end}
	func {352, 'wave_shader_blue:hidden', 1}

	func {344, 'thinline_blue:hidden', 0}
	func {352, 'thinline_blue:hidden', 1}
	
	ease {344-1, 2, inOutCirc, 0, 'rr_z'}

	add 
	{342, 4, inOutQuad, 360, 'rr_y'}
	{344, 4, outSine, 360*2, 'rr_y'}
	{344, 4, inCubic, 360*4, 'rr_y'}
	{342, 4, inOutCirc, 180, 'rr_x'}

	-- {348, 4, flip(outElastic), 90, 'rr_y'}
	set {348, 0, 'rr_y'}


	func {342, 4, inOutCubic, 0, 0.35, function(a) moontransition:zoom(a) end}
	func {352, 2, outExpo, 0.35, 1, function(a) moontransition:zoom(a) end}

	ease 
	{348, 2, outCirc, 123*2.5, 'bgy', 2.5, 'bgzoom'}
	{350, 2, inCirc, 123*2, 'bgy', 2, 'bgzoom'}

	ease {352, 16, outExpo, 0, 'bgy', 1, 'bgzoom'}

	func {348, 2, outCirc, 1, 1.25, function(a) moontransition:basezoomx(a) moontransition:basezoomy(a) end}
	func {350, 2, inCirc, 1.25, 1, function(a) moontransition:basezoomx(a) moontransition:basezoomy(a) end}

	func {352-0.5, 1, inOutCirc, 0.75, 0, function(a) crt_sprite:GetShader():uniform1f('amp', a) end}
	func {352-0.5+1, 'crt_sprite:hidden', 1}

	add {352-1, 2, inOutExpo, 180, 'rr_x', -50, 'stealth'}

	add
	{352, 8, outCirc, 360, 'rr_y'}
	{354, 14, inQuint, 360*14, 'rr_y'}

	-- ease 
	-- {351, 1, inExpo, 1.25, 'allzoom'}
	-- {352, 16, outExpo, 1, 'allzoom'}

	-- f
	for col = 0, 3 do definemod {'rotationz'..col, function(p) if p % 360 == 0 then return 0, 0, 0, 0 end if p % 180 == 0 then return 100, 0, 0, 0 end local theta = p * math.pi / 180 return 50 - 50 * math.cos(theta), 900, -212.5, 1000 * math.sin(theta) end, 'reverse'..col, 'zigzagzperiod'..col, 'zigzagzoffset'..col, 'zigzagz'..col} end
	-- for i=0,3 do
	-- 	for r=0,3 do
	-- 		add {348-0.5 + i/4 + r, 1, inOutCirc, 90*((r+1)%2)*(math.floor(r/2)*2-1), 'rotationz'..i}

	-- 		print(90*((r+1)%2)*(math.floor(r/2)*2-1))
	-- 	end
	-- end
	for i=0,3 do
		ease 
		{348-0.5 + i/4, 1, inOutCirc, 45, 'rotationz'..i}
		{349-0.5 + i/4, 1, inOutCirc, 0, 'rotationz'..i}
		{350-0.5 + i/4, 1, inOutCirc, -45, 'rotationz'..i}
		{351-0.5 + i/4, 1, inOutCirc, 0, 'rotationz'..i}
	end

	ease 
	{348-0.25, 0.5, inOutCirc, 10, 'rotationz', -25, 'flip', -100, 'attenuatex'}
	{349-0.25, 0.5, inOutCirc, 0, 'rotationz', 0, 'flip', 0, 'attenuatex'}
	{350-0.25, 0.5, inOutCirc, -10, 'rotationz', 25, 'flip', 300, 'attenuatex'}
	{351-0.25, 0.5, inOutCirc, 0, 'rotationz', 0, 'flip', 0, 'attenuatex'}

	for i=0,7 do
		ease {348-0.125 + i/2, 0.25, inOutCirc, (i+1)%2*100, 'invert'}
	end
	-- mod_outin(348, 2, 0, 45, 'rr_y')
	-- mod_outin(350, 2, 0, -45, 'rr_y')
	ease 
	{348-0.5, 1, inOutCirc, 1, 'audiozoommult'}
	{367, 1, inCirc, 0, 'audiozoommult'}

	func {356, 'redsource_af:hidden', 0}

	-- back to p1 and p2
	set {355, 0, 'tiny', 0, 'stealth', plr=2} 
	set {356, 1.5, 'xmod'}
	func {356, function() 
		mask_player:hidden(1)
		for pn=1,2 do
			PP[pn]:hidden(0)
		end
		for pn=3,5 do
			PP[pn]:hidden(1)
			P[pn]:SetAwake(false)
		end
	end}

	ease 
	{351, 1, inCirc, 1, 'audioheightmult'}
	{364, 4, inExpo, 0, 'audioheightmult'}

	-- pixels
	for i,v in ipairs(pixel_af:GetChildren()) do
		v:SetTextureFiltering(false)
	end
	for i,v in ipairs(pixelplayer:GetChildren()) do
		v:SetTextureFiltering(false)
	end

	--------- i am not good at programming
	local pixelNotedata = P[1]:GetNoteData(350, 592)

	local roffsets = {[0] = -96, -32, 32, 96}
	local rrotation = {[0] = 90, 0, 180, 270}
	local notereadoffset = 0

	-- reset {368}
	set {367, 0, 'drunkspeed', -50, 'drunkperiod'}
	ease {368-0.5, 1, inOutCirc, 50, 'drunk'}

	for i=0,31+16+12 do
		local m=i%2*2-1
		ease {368-0.25 + i/2, 0.5, inOutExpo, 5*m, 'alternate', -2.5*m, 'reverse'}

		-- ease 
		-- {368+i/2, 0, instant, 0, 'centered2'}
		-- {368+i/2, 0.5, linear, 50*1.5, 'centered2'}
	end
	func {368, 30, function(beat) 
		local nbeat = beat-368
		for pn=1,2 do
			local p = P[pn]

			for c=0,3 do
				p:SetYSpline(1, c, 0, 1, -1)
				p:SetYSpline(2, c, (nbeat*2)%1 * 50*1.5, (nbeat*2)%1 * 50*1.5, -1)
			end
		end
	end}
	set {398, 100, 'splineyreset'}

	-- transferred mods
	local pixelmod = {}
	pixelmod.xpos=0
	pixelmod.xmodmult = 1

	func {0, 999, function(beat, p) 
		pixelmod.tiny = p[2].tiny
		pixelmod.xpos = p[2].x
		pixelmod.rotx = p[2].rotationx
		pixelmod.roty = p[2].rotationy

		-- pixelmod.roty = p[3].rr_y
		-- print(pixelmod.roty)
	end}

	---- playfield/explosions
	func {368, 560-368, function(beat) 
		for i=1,4 do
			pixelexplosion[i]:x( roffsets[i-1] + GAMESTATE:GetX(1, i, 0) )
			pixelexplosion[i]:y( GAMESTATE:GetY(1, i, 0)+10 )
			pixelexplosion[i]:z( GAMESTATE:GetZ(1, i, 0) )
		end

		pixelplayer_pos:x( pixelmod.xpos )
		pixelplayer_pos:rotationx( pixelmod.rotx )
		pixelplayer_pos:rotationy( pixelmod.roty )

		-- print(pixelmod.roty)
	end}

	local pixelPlayerDraw = function()
		local beat = GAMESTATE:GetSongBeat()

		-- receptors
		for i=0,3 do
			pixelreceptor:x( roffsets[i] )
			pixelreceptor:rotationz(rrotation[i])

			pixelreceptor:x2( GAMESTATE:GetX(1, i, 0) )
			pixelreceptor:y2( GAMESTATE:GetY(1, i, 0)+10 )
			pixelreceptor:z2( GAMESTATE:GetZ(1, i, 0) )

			pixelreceptor:basezoomx(1 - 0.5*pixelmod.tiny/100)
			pixelreceptor:basezoomy(1 - 0.5*pixelmod.tiny/100)
			
			pixelreceptor:Draw()
		end

		-- arrows
		for i=0,15 do
			local currentdata = pixelNotedata[notereadoffset+1+i]
			local currentoffset = pixelNotedata[notereadoffset+1+i] and pixelNotedata[notereadoffset+1+i][1] or 1000
			if i==0 then 
				if currentoffset-beat <= -1 then notereadoffset = notereadoffset+1 end
				-- print(current-beat) 
			end

			if currentdata then 

				if currentdata[3]=='M' then				
					pixelmine:x( roffsets[ currentdata[2] ] + GAMESTATE:GetX(1, currentdata[2], (currentoffset-beat)*64*1.5*pixelmod.xmodmult) ) 
					pixelmine:y2( GAMESTATE:GetY(1, currentdata[2], (currentoffset-beat)*64*1.5*pixelmod.xmodmult) + 135 )
					pixelmine:z2( GAMESTATE:GetZ(1, currentdata[2], (currentoffset-beat)*64*1.5*pixelmod.xmodmult) )

					pixelmine:basezoomx(1 - 0.5*pixelmod.tiny/100)
					pixelmine:basezoomy(1 - 0.5*pixelmod.tiny/100)

					if not currentdata.hidden then
						pixelmine:Draw()
					end
				else
					local r,g,b = 0.984,0.224,0.016
					if currentdata[1]%1 == 0.5 then 
						r=0 g=0.573 b=1 
					elseif currentdata[1]%1 == 0.25 or currentdata[1]%1 == 0.75 then
						r=0.485 g=0.914 b=0.043
					end

					pixelarrow:diffuse(r,g,b,1)
				
					pixelarrow:x( roffsets[ currentdata[2] ] + GAMESTATE:GetX(1, currentdata[2], (currentoffset-beat)*64*1.5*pixelmod.xmodmult) ) 
					pixelarrow:y2( GAMESTATE:GetY(1, currentdata[2], (currentoffset-beat)*64*1.5*pixelmod.xmodmult) + 135 )
					pixelarrow:z2( GAMESTATE:GetZ(1, currentdata[2], (currentoffset-beat)*64*1.5*pixelmod.xmodmult) )

					pixelarrow:rotationz( rrotation[ currentdata[2] ] ) 

					pixelarrow:basezoomx(1 - 0.5*pixelmod.tiny/100)
					pixelarrow:basezoomy(1 - 0.5*pixelmod.tiny/100)

					if not currentdata.hidden then
						pixelarrow:Draw()
					end
				end
			end
		end
	end
	pixelplayer:SetDrawFunction(pixelPlayerDraw)

	---- judge ments
	local judgecolors = {
		{0, 216, 255},
		{255, 204, 0},
		{0, 255, 0},
		{168, 255, 0},
		{255, 96, 0},
	}
	function doPixelJudgment(judge, col)
		local j = pixelexplosion[col+1]
		local color = judgecolors[judge]

		j:finishtweening()

		j:diffuse( color[1]/255, color[2]/255, color[3]/255, 1 )
		j:accelerate(0.142)
		j:diffusealpha(0)

		-- it took me like an hour to figure out how do to this because i am not smart
		local i = 1
		local ended = false
		local beat = GAMESTATE:GetSongBeat()

		local greatwindow = 0.090000 / (60/210)
		local window = 0.180000 / (60/210)
		while not ended and i<#pixelNotedata do
			local v = pixelNotedata[i]

			if math.abs(beat-v[1]) <= greatwindow and v[2]==col and not v.hit then
				v.hit = true
				v.hidden = true
				ended = true
			elseif math.abs(beat-v[1]) <= window and v[2]==col and not v.hit then
				v.hit = true
				ended = true
			end

			i=i+1
		end
	end

	for i=1,5 do
		local i=i
		for c=0,3 do
			local c=c
			judgment_handle:addcommand('Fk_P1_'.. c ..'_W'.. i ..'Message', function() 
				doPixelJudgment(i, c)
			end)
		end
	end

	---- swing down
	zoom_sprite:SetTexture( zoom_aft:GetTexture() )
	func {364, 32, linear, 1, 1.1, function(a) zoom_sprite:zoom(a) end}
	func {400-1, 2, inOutExpo, 1.1, 1, function(a) zoom_sprite:zoom(a) end}

	pixelwindow_af:hidden(1)
	pixelborder_af:hidden(1)
	pixelglare_af:hidden(1)
	pixel_af:hidden(1)

	func {364, function() 
		pixelwindow_af:hidden(0)
		pixelborder_af:hidden(0)
		pixelglare_af:hidden(0)	
		pixel_af:hidden(0)
	end}

	func {364, 4, inQuad, -sh, 25, function(a) 
		pixelwindow_af:y2(a)
		pixelborder_af:y2(a)
		pixelglare_af:y2(a)
	end}
	func {368, 4, outElastic, 25, 0, function(a) 
		pixelwindow_af:y2(a)
		pixelborder_af:y2(a)
		pixelglare_af:y2(a)
	end}

	func {368, 392-368, function(beat) 
		local per = 1-outQuart((beat-368)/32)
		pixelwindow_af:rotationz( math.sin((beat-368)/4.5*math.pi)*8*per )
		pixelborder_af:rotationz( math.sin((beat-368)/4.5*math.pi)*8*per )
		pixelglare_af:rotationz( math.sin((beat-368)/4.5*math.pi)*8*per )
	end}

	func {392, 6, inQuad, 0, -sh, function(a) 
		pixelwindow_af:y2(a)
		pixelborder_af:y2(a)
		pixelglare_af:y2(a)
	end}
	func {392, 6, inQuad, 0, 10, function(a) 
		pixelwindow_af:rotationz(a)
		pixelborder_af:rotationz(a)
		pixelglare_af:rotationz(a)
	end}

	func {392+6, function() 
		pixelwindow_af:hidden(1)
		pixelborder_af:hidden(1)
		pixelglare_af:hidden(1)	
		pixel_af:hidden(1)
	end}


	ease 
	{398-0.5, 1, inOutCirc, 0, 'drunk', 0, 'alternate', 0, 'reverse'}
	{398-1, 2, inOutExpo, 1.25, 'allzoom', 150, 'zoomy', 150, 'zoomx', 0, 'audioheightmult', 100, 'tiny'}
	{400-1, 2, inOutExpo, 1, 'allzoom', 100, 'zoomx', 100, 'zoomy', 1, 'audioheightmult', 0, 'tiny'}

	add 
	{398-1, 2, inOutExpo, -0.25, 'xmod'}
	{400-1, 2, inOutExpo, 0.25, 'xmod'}

	-- for c=0,7 do
	-- 	local c=c
	-- 	func {397, function() P[math.floor(c/4)+1]:SetNumStealthGradientPoints(c%4, 0) end}
	-- end
	-- set {397, 100, 'sudden', 200, 'suddenoffset'}
	for i=0,3 do
		ease 
		{398-0.5, 1, inOutExpo, 20, 'reverse'..i}
		{400-0.5, 1, inOutExpo, 0, 'reverse'..i}
	end

	ease {384, 14, linear, 1, 'audioheightmult'}

	-------- callback 	
	set {399, 50, 'drawsize', 900, 'bumpyperiod'}
	ease {400-0.5, 1, inOutCirc, 90, 'zoom'}

	for i=0,3 do
		ease 
		{400-0.5 + i*8, 0.5, inExpo, 1200, 'bumpy', -1000, 'z', 250, 'zoomz', 1.2, 'allzoom'}
		{400 + i*8, 8, outQuad, 0, 'bumpy', 0, 'z', 100, 'zoomz', 1, 'allzoom'}

		ease 
		{400+i*8, 8, flip(outQuad), 25, 'vibratex', -3000, 'tinyz'}
		{400+i*8, 2, flip(outExpo), -400, 'tiny'}

		func {400-0.5+i*8, 0.5, inCirc, 150*((i+1)%2*2-1), 0, function(a) 
			plr_af:SetVanishX(scx+a)
		end}
		func {400+i*8, 7.5, outQuad, 0, 150*(i%2*2-1), function(a) 
			plr_af:SetVanishX(scx+a)
		end}

		if i>1 then
			func {400-0.5+i*8, 0.5, inCirc, 150*((i+1)%2*2-1), 0, function(a) 
				plr_af:SetVanishY(scy+a)
			end}
			func {400+i*8, 7.5, outQuad, 0, 150*(i%2*2-1), function(a) 
				plr_af:SetVanishY(scy+a)
			end}
		end
	end

	if slumpage then
		func {399.5, 432-399.5, function(beat, p) 
			for pn=1,2 do
				p[pn].zoomz = p[pn].zoomz*0.5
				p[pn].z = p[pn].z*0.5
			end
		end}
	end

	ease {432-0.5, 1, inOutCirc, 0, 'movey', 1, 'audiozoommult'}

	set {431.5, 1000, 'cubicxoffset', -100, 'orient'}
	for i=0,11 do
		local mult = (i%2*2-1)

		ease 
		{431.5+i, 0.5, inExpoSnap, 75, 'brake', 50*mult, 'cubicx', -50*mult, 'drunk', -200, 'tiny', -200, 'tinyz'}
		{432+i, 1, outCirc, 0, 'brake', 0, 'cubicx'}
		{432+i, 2, outExpo, 0, 'drunk', 0, 'tiny', 0, 'tinyz'}
	end
	for i=0,4 do
		local mult = (i%2*2-1)

		ease 
		{443.5+i/2, 0.5, inExpoSnap, 75, 'brake', 50*mult, 'cubicx', -50*mult, 'drunk', -200, 'tiny', -200, 'tinyz'}
		{444+i/2, 1, outCirc, 0, 'brake', 0, 'cubicx'}
		{444+i/2, 2, outExpo, 0, 'drunk', 0, 'tiny', 0, 'tinyz'}
	end
	for i=0,3 do
		local mult = (i%2*2-1)

		ease 
		{446.75+i/4, 0.25, inExpoSnap, 75, 'brake', 50*mult, 'cubicx', -50*mult, 'drunk', -200, 'tiny', -200, 'tinyz'}
		{447+i/4, 0.5, outCirc, 0, 'brake', 0, 'cubicx'}
		{447+i/4, 1, outExpo, 0, 'drunk', 0, 'tiny', 0, 'tinyz'}
	end

	func {432, 28, function(beat) 
		local per = (beat-432)/28
		plr_af:SetVanishPoint( scx + math.cos(beat/4*math.pi)*200*per, scy + math.sin(beat/4*math.pi)*200*per )
	end}
	func {460, function(beat) 
		plr_af:SetVanishPoint( scx,scy )
	end}

	local voilon = {
		{400.000,0,1},
		{401.500,0,1},
		{403.000,0,1},
		{404.500,0,1},
		{406.000,0,1},
		{407.000,0,1},
		{408.000,0,1},
		{409.500,0,1},
		{411.000,0,1},
		{412.500,0,1},
		{414.000,0,1},
		{415.000,0,1},
		{416.000,0,1},
		{417.500,0,1},
		{419.000,0,1},
		{420.500,0,1},
		{422.000,0,1},
		{423.000,0,1},
		{424.000,0,1},
		{425.500,0,1},
		{427.000,0,1},
		{428.500,0,1},
		{430.000,0,1},
		{431.000,0,1},
		{432.000,0,1},
		{433.500,0,1},
		{435.000,0,1},
		{436.000,0,1},
		{437.500,0,1},
		{439.000,0,1},
		{440.000,0,1},
		{441.500,0,1},
		{443.000,0,1},
		{444.000,0,1},
		{445.500,0,1},
		{447.000,0,1},
		{448.000,0,1},
		{449.500,0,1},
		{451.000,0,1},
		{452.000,0,1},
		{453.500,0,1},
		{455.000,0,1},
		{456.000,0,1},
		{457.500,0,1},
		{459.000,0,1},
		{460.000,0,1},
	}
	for i,v in ipairs(voilon) do
		ease {v[1]-0.5, 1, inOutExpo, i%2*100, 'invert'}
	end

	for i=0,3 do
		add {400+i*8 - 1, 2, inOutExpo, 100, 'reverse'}
		ease {400+i*8 - 1, 2, inOutExpo, -100 * (i%2*2-1), 'movey'}
	end


	set {432, -100, 'drawsizeback', 0, 'rr_x'}
	ease {432, 14, inOutQuad, -90, 'rr_x', -200, 'cubicz', -140, 'y', 1.5, 'xmod'}

	local vibro = {
		{448.000,0,1},
		{448.500,0,1},
		{448.750,0,1},
		{449.000,0,1},
		{449.250,0,1},
		{449.500,0,1},
		{450.000,0,1},
		{450.250,0,1},
		{450.500,0,1},
		{450.750,0,1},
		{451.000,0,1},
		{451.250,0,1},
		{451.500,0,1},
		{452.000,0,1},
		{452.500,0,1},
		{452.750,0,1},
		{453.000,0,1},
		{453.250,0,1},
		{453.500,0,1},
		{454.000,0,1},
		{454.250,0,1},
		{454.500,0,1},
		{454.750,0,1},
		{455.000,0,1},
		{455.250,0,1},
		{455.500,0,1},
		{456.000,0,1},
		{456.250,0,1},
		{456.500,0,1},
		{456.750,0,1},
		{457.000,0,1},
		{457.250,0,1},
		{457.500,0,1},
		{457.750,0,1},
		{458.000,0,1},
		{458.250,0,1},
		{458.500,0,1},
		{458.750,0,1},
		{459.000,0,1},
		{459.250,0,1},
		{459.500,0,1},
		{459.750,0,1},
	}
	for i,v in ipairs(vibro) do
		local mult = (i%2*2-1)

		ease 
		{v[1]-0.25, 0.25, inExpo, 200*mult, 'drunk', -200, 'tiny', -200, 'tinyz'}
		{v[1], 0.5, linear, 0, 'drunk'}
		{v[1], 0.5, outExpo, 0, 'tiny', 0, 'tinyz'}
	end

	ease 
	{451.5-0.25, 0.5, inOutExpo, 9999, 'drunkspeed'}
	{452-0.25, 0.5, inOutExpo, 0, 'drunkspeed'}

	{455.5-0.25, 0.5, inOutExpo, 9999, 'drunkspeed'}
	{456-0.25, 0.5, inOutExpo, 0, 'drunkspeed'}

	{458-0.25, 0.5, inOutExpo, 9999, 'drunkspeed', 9999, 'tipsyspeed'}
	{460-0.25, 0.5, inOutExpo, 9999, 'drunkspeed'}

	set {459, 200, 'tipsy'}

	ease {460-0.5, 1, inOutCirc, 0, 'cubicz', 0, 'y', 0, 'drunk', 0, 'tipsy'}

	add {460-2, 4, inOutExpo, 360+90, 'rr_x'}
	ease {460-2, 4, inOutExpo, 123*3, 'bgy', 3, 'bgzoom'}

	-------- mask funny moment
	local ccolor = {
		{1,0,0},
		{0,1,0},
		{0,0,1},
		{0,0,0},
	}

	maskcurtain_af:SetDrawByZPosition(true)
	maskcurtain_af:zoomz(0)

	for i=0,3 do 
		curtain[i]:hidden(1) 

		-- curtain[i]:cropleft(0.01) curtain[i]:cropright(0.01)
		-- curtain[i]:fadeleft(0.02) curtain[i]:faderight(0.02)
	end
	for i=0,3 do
		local i=i
		func {463.5+i, function() curtain[i]:hidden(0) end}
	end
	func {460, function() pixel_af:hidden(0) end}

	aux 'curtainamt'
	aux 'curtainrot'

	local curtain_val = {}

	func {463, 524-463, function(beat, p) 
		-- local nbeat = beat-460
		local nbeat = p[1].curtainamt

		for i=0,3 do
			local c = curtain[i]
			local zoom = modulo(nbeat/4 - i/4, 1)

			c:zoomz(10)

			c:diffuse(ccolor[i%4+1][1], ccolor[i%4+1][2], ccolor[i%4+1][3], 1)
			-- c:zoomto( sw, sh )
			c:zoomto( outQuad(zoom) * sw*1.1 * p[1].curtainmult, sh*2 )

			c:rotationz(zoom*60*p[1].curtainrot)

			local zamt = i + math.floor(nbeat/4 - i/4)*4
			c:z( zamt )
			-- print( i, c:GetZ() )

			curtain_val[i] = zoom

			-- if i==0 then print(p[1].curtainamt) end
		end	
	end}	
	func {524, function() 
		for i=0,7 do 
			local c = curtain[i]
			c:hidden(0)

			for _,v in ipairs {'left', 'right'} do
				c['crop'..v](c, 0.01)
				c['fade'..v](c, 0.05)
			end
		end
	end}

	aux 'curtaintrans'
	aux 'curtainmult'
	setdefault {1, 'curtainmult'}
	func {524, 40, function(beat, p) 
		-- local nbeat = beat-460
		local nbeat = p[1].curtainamt

		for i=0,7 do
			local c = curtain[i]
			local zoom = modulo(nbeat/8 - i/8, 1)

			c:zoomz(10)

			c:diffuse(ccolor[i%4+1][1], ccolor[i%4+1][2], ccolor[i%4+1][3], 1)
			-- c:zoomto( sw, sh )
			c:zoomto( lerp(outCirc(zoom), outExpo(zoom)*1.45, p[1].curtaintrans) * sw*1.2, lerp(inQuad(zoom), outExpo(zoom)*1.3, p[1].curtaintrans) * sw*1.2 )

			c:rotationz(1-outCirc(zoom)*70*p[1].curtainrot)

			local zamt = i + math.floor(nbeat/8 - i/8)*8
			c:z( zamt )
			-- print( i, c:GetZ() )

			curtain_val[i] = zoom

			-- if i==0 then print(p[1].curtainamt) end
		end	
	end}	

	ease {460-0.5, 1, inOutExpo, 0, 'audiozoommult', 100, 'zoom'}

	plr={1,2,3,4,5}
	reset {464, exclude={'rotationy', 'xmodmult', 'audioheightmult', 'aftzoom', 'aftzoommult', 'bgy', 'bgzoom', 'xmod', 'curtainamt', 'curtainmult', 'reverse'}}
	plr=nil

	ease {464-0.5, 1, inOutExpo, 0.5, 'aftzoommult'}
	mod_outin(460, 4, 1, 0.75, 'allzoom')

	local function barDrawEndFunctionParent(r,g,b)
		local beat = GAMESTATE:GetSongBeat()

		local current = math.floor(beat*12)
		if current<1 then current=1 end
		if current>#audioData then current=#audioData end

		for i=1,barNumber,2 do
			local value = audioData[current][i+1]
			value = inQuad(value)
			
			bar:valign(1)

			bar:x( (i-1) * (sw/barNumber) - (sw/barNumber) * 18 )
			bar:y( scy )
			bar:zoomto( sh/barNumber*4-24, sh*0.5 * value * m_audioheightmult )

			bar:diffuse(r,g,b,1)
			
			-- bar:croptop(0.1)
			-- bar:fadetop(0.2)

			-- local xval = (i-1) * (sh/barNumber) - (sh/barNumber) * 18
			-- if i>4 and i<barNumber-4 then
				bar:Draw()
			-- end
		end
	end

	local barDrawFunction_endG = function()
		barDrawEndFunctionParent(0,0,0)
	end
	local barDrawFunction_endB = function()
		if slumpage then barDrawEndFunctionParent(1,0,0) else barDrawEndFunctionParent(1,0,0.627) end
	end

	audiobars_end_green:SetDrawFunction(barDrawFunction_endG)
	audiobars_end_blue:SetDrawFunction(barDrawFunction_endB)

	func {463.5, function() 
		-- for pn=1,2 do
		-- 	PP[pn]:hidden(1)
		-- end
		PP[2]:hidden(1)

		for pn=4,5 do
			P[pn]:SetAwake(true)
			PP[pn]:hidden(0)
		end

		-- decor[8]:diffusealpha(1)
		-- -- decor[8]:zoomto(sw, sh*2)
		-- -- decor[8]:customtexturerect(0,0,20*(sw/SCREEN_HEIGHT),40)
		-- decor[8]:x(-150)

		-- decor[1]:diffusealpha(1)
		decor[4]:diffusealpha(1)
		decor[4]:spin() decor[4]:effectmagnitude(0,0,15)
		decor[6]:diffusealpha(1)

		audiobars_end_green:hidden(0)
		audiobars_end_blue:hidden(0)
	end}

	func {460, 2, outCirc, 0, 0.9, function(a) end_fadeout:diffusealpha(a) end}
	func {462, 2, inCirc, 0.9, 0, function(a) end_fadeout:diffusealpha(a) end}

	--------- curtain movement
	-- add {464, 28, linear, 28, 'curtainamt'}
	-- add 
	-- {496, 24, linear, -24, 'curtainamt'}
	-- {496, 24, inCirc, -12, 'curtainamt'}
	-- {510, 2, linear, 2, 'curtainamt'}
	-- {510, 2, outExpo, 1, 'curtainamt'}
	-- {510, 2, inExpo, -1, 'curtainamt'}

	for i=0,28 do
		add 
		{464-0.5 + i, 1, inOutCubic, 1, 'curtainamt'}
		-- {464 + i, 4, outElastic, 0.5, 'curtainamt'}

		ease 
		{464-0.5+i, 0.5, inCirc, 1.25, 'curtainmult'}
		{464+i, 4, outElastic, 1, 'curtainmult'}
	end
	-- add {464, 28, inQuad, 8, 'curtainamt'}
	for i=0,24 do
		if not (i>=14 and i<16) then
			add 
			{496-0.5 + i, 1, inOutCirc, -2, 'curtainamt'}
		end
	end
	add 
	{492, 2, outExpo, 1, 'curtainamt'}
	{494, 2, inExpo, -1, 'curtainamt'}

	{510-0.5, 1, inOutCirc, 1, 'curtainamt'}
	{510, 2, inCubic, -1, 'curtainamt'}

	ease 
	{492-1, 2, inOutExpo, 1, 'curtainrot'}
	{511-1, 2, linear, -1, 'curtainrot'}
	{520-1, 2, inOutExpo, 0, 'curtainrot'}

	func {520-1, 2, inOutExpo, 0, 1, function(a) 
		mask_inter:zoomto(sw, sh*a)
	end}
	func {528-1, 2, inOutExpo, 1, 0, function(a) 
		mask_inter:zoomto(sw*a, sh)
	end}


	ease 
	{520-1, 2, inOutExpo, 0, 'cinfluence'}
	-- {528-1, 2, inOutExpo, 1, 'cinfluence'}

	set {520, 50, 'drawsize'} {528, 0, 'drawsize'}

	mod_outin(520, 8, 1, 0.75, 'allzoom')

	mod_outin(520, 2, 100, 110, 'zoom')
	mod_outin(522, 2, 100, 120, 'zoom')
	mod_outin(524, 1, 100, 130, 'zoom')
	mod_outin(525, 1, 100, 130, 'zoom')
	mod_outin(526, 2, 100, 130, 'zoom')

	ease 
	{520-1, 2, inOutExpo, 25, 'rotationy', 25, 'rotationx'}
	{522-1, 2, inOutExpo, -25, 'rotationy'}
	{524-1, 2, inOutExpo, 0, 'rotationy', -25, 'rotationx'}
	{528-1, 2, inOutExpo, 0, 'rotationx'}

	swap {524-0.5, 1, inOutExpo, 'dlru'}
	swap {525-0.5, 1, inOutExpo, 'ldur'}
	swap {526-0.5, 1, inOutExpo, 'rudl'}
	swap {528-0.5, 1, inOutExpo, 'ldur'}

	ease {528-2, 4, inOutExpo, 360, 'rr_y'}

	mod_outin(556.5, 1.5, 100, 110, 'zoom')
	mod_outin(558, 1, 100, 120, 'zoom')
	mod_outin(559, 1, 100, 130, 'zoom')

	ease 
	{556.5-0.5, 1, inOutExpo,  -25, 'rotationx'}
	{558-1, 2, inOutExpo, -25, 'rotationy'}
	{559-1, 2, inOutExpo, 25, 'rotationy'}
	{560-1, 2, inOutExpo, 0, 'rotationy', 0, 'rotationx'}

	for i=0,28 do
		add 
		{528-0.5 + i, 1, inOutCubic, 2, 'curtainamt'}

		-- ease 
		-- {528-0.5+i, 1, inOutExpo, i%2*100, 'invert', plr={1,4}}
		-- {528-0.5+i, 1, inOutExpo, (i+1)%2*100, 'invert', plr={2,5}}
	end
	add {528, 28, linear, 7, 'curtainamt'}

	set {524, 0, 'reverse', plr={1,2,3,4,5}}
	ease 
	{528-0.5, 1, inOutCirc, 180, 'rr_z', 100, 'reverse', plr={2,5}}
	{528-0.5, 1, inOutCirc, -32, 'x', plr={1,4}}
	{528-0.5, 1, inOutCirc, 32, 'x', plr={2,5}}

	if not slumpage then
		ease {528-0.5, 1, inOutCirc, 100, 'alternate', plr={1,2,4,5}}
	end
	-- set {524, 1, 'curtainrot'}
	for i=0,3 do
		-- add {528+i*8, 8, inOutSine, 16 * (i%2*2-1), 'curtainamt'}

		if i==3 then
			add 
			{528+i*8, 4, outSine, i%2*2-1, 'curtainrot'}
			{528+i*8, 4, inSine, -(i%2*2-1), 'curtainrot'}
		else
			ease 
			{528+i*8, 4, outSine, i%2*2-1, 'curtainrot'}
			{532+i*8, 4, inSine, 0, 'curtainrot'}
		end

		add {528-4+i*8, 8, inOutCirc, 100, 'reverse', plr={1,2,3,4,5}}
		-- ease {528-4+i*8, 8, inOutCirc, (i+1)%2*100, 'flip', plr={1,2,3,4,5}}
	end

	set 
	{560-4, 0, 'reverse', plr={2,5}}
	{560-4, 100, 'reverse', 0, 'rr_z', 100, 'flip', plr={1,4}}
	ease 
	{556-1, 2, inOutExpo, 180, 'rr_y', 0, 'x', 0, 'alternate'}
	{556.5-3, 6, inOutCirc, 1, 'curtaintrans'}
	-- {558, 2, inCirc, 1, 'curtaintrans'}

	for i=0,27 do
		add 
		{464-1 + i, 2, inOutExpo, 100, 'reverse', plr={1,2,4,5}}
		ease {464-1 + i, 2, inOutExpo, 45*(i%2*2-1), 'rotationy', plr={1,2,4,5}}
		-- if i>15 then
		-- 	ease {497-1 + i, 2, inOutExpo, (i+1)%2*100, 'invert', plr={1,2,4,5}}
		-- end
	end
	ease {492-1, 2, inOutExpo, 0, 'rotationy', plr={1,2,4,5}}
	for i=0,23 do
		if not (i>=13 and i<15) then
			add 
			{497-1 + i, 2, inOutExpo, 100, 'reverse', plr={1,2,4,5}}
			ease {497-1 + i, 2, inOutExpo, 45*(i%2*2-1), 'rotationx', plr={1,2,4,5}}
		end
		-- if i>15 then
		-- 	ease {497-1 + i, 2, inOutExpo, (i+1)%2*100, 'invert', plr={1,2,4,5}}
		-- end
	end
	ease {520-1, 2, inOutExpo, 0, 'rotationx', plr={1,2,4,5}}

	func {528, 28, function(beat, p) 
		for i=1,4 do
			local pn = i>2 and i+1 or i
			
			p[pn].rotationx = math.sin(beat/4*math.pi)*30
			p[pn].rotationy = math.cos(beat/4*math.pi)*30
			if i==2 then 
				pixelmod.rotx = math.sin(beat/4*math.pi)*30 
				pixelmod.roty = math.cos(beat/4*math.pi)*30 
			end
		end
	end}
	func {530+28, function() pixelmod.rotx=0 pixelmod.roty=0 end}
	set {530+28, 0, 'rotationx', 0, 'rotationy', plr=2}

	plr=4
	for i=0,3 do

		ease 
		{492-1 + i/2, 2, inOutExpo, 100, 'reverse'..i}
		{494-1 + i/2, 2, inOutExpo, 0, 'reverse'..i}

	end

	mod_outin(494, 0.75, 0, -45, 'rotationy')
	mod_outin(494.75, 0.75, 0, 45, 'rotationy')
	mod_outin(495.5, 0.5, 0, -45, 'rotationy')
	mod_outin(494, 0.75, 0, 45, 'skewy')
	mod_outin(494.75, 0.75, 0, -45, 'skewy')
	mod_outin(495.5, 0.5, 0, 45, 'skewy')

	plr=1

	mod_outin(494, 2, 1, 1.5, 'curtainmult')
	mod_outin(510, 2, 1, 2, 'curtainmult')

	plr=nil

	plr = 4
	mod_outin(510, 2, 0, 50, 'drawsize')
	plr = {1,2,4,5}
	set {496, 25, 'drawsize'}
	plr=nil

	func {509.5-0.5, 1, inOutExpo, 0, 1, function(a) fword:diffusealpha(a) end}
	func {512-0.5, 1, inOutExpo, 1, 0, function(a) fword:diffusealpha(a) end}

	for i=0,3 do
		ease 
		{556-1, 2, inOutExpo, 100, 'reverse'..i}
	end

	set {556, 0, 'curtainrot'}

	ease {528, 32, linear, 1.2, 'aftzoom'}
	-- func {528, 32, function(beat, p) 
	-- 	p[1].curtainrot = math.sin(beat/8*math.pi)*1
	-- end}

	-- for i=0,13 do
	-- 	-- add {465-0.5 + i*2, 1, inOutExpo, 100, 'reverse', plr={1,2,4,5}}
	-- 	ease {465-0.5 + i*2, 1, inOutExpo, (i+1)%2*100, 'invert', plr={1,2,4,5}}
	-- end

	------------------ mod
	local ckicks = {
		{464.000,0,1},
		{465.000,0,1},
		{466.000,0,1},
		{467.000,0,1},
		{468.000,0,1},
		{469.000,0,1},
		{470.000,0,1},
		{471.000,0,1},
		{472.000,0,1},
		{472.500,0,1},
		{473.000,0,1},
		{474.000,0,1},
		{475.000,0,1},
		{476.000,0,1},
		{476.500,0,1},
		{477.000,0,1},
		{477.500,0,1},
		{478.000,0,1},
		{479.000,0,1},
		{480.000,0,1},
		{481.000,0,1},
		{482.000,0,1},
		{483.000,0,1},
		{484.000,0,1},
		{485.000,0,1},
		{486.000,0,1},
		{487.000,0,1},
		{488.000,0,1},
		{489.000,0,1},
		{490.000,0,1},
		{490.250,0,1},
		{490.500,0,1},
		{490.750,0,1},
		{491.000,0,1},
		{491.250,0,1},
		{491.500,0,1},
		{491.750,0,1},
		{492.000,0,1},
		{494.000,0,1},
		{494.750,0,1},
		{495.500,0,1},
		{496.000,0,1},
		{496.500,0,1},
		{497.000,0,1},
		{498.000,0,1},
		{499.000,0,1},
		{500.000,0,1},
		{501.000,0,1},
		{502.000,0,1},
		{503.000,0,1},
		{504.000,0,1},
		{504.500,0,1},
		{505.000,0,1},
		{506.000,0,1},
		{507.000,0,1},
		{508.000,0,1},
		{508.500,0,1},
		{509.000,0,1},
		{509.500,0,1},
		{510.000,0,1},
		{512.000,0,1},
		{513.000,0,1},
		{514.000,0,1},
		{515.000,0,1},
		{516.000,0,1},
		{517.000,0,1},
		{518.000,0,1},
		{519.000,0,1},
		{520.000,0,1},
		{522.000,0,1},
		{524.000,0,1},
		{525.000,0,1},
		{526.000,0,1},
		{528.000,0,1},
		{529.000,0,1},
		{530.000,0,1},
		{531.000,0,1},
		{532.000,0,1},
		{533.000,0,1},
		{534.000,0,1},
		{535.000,0,1},
		{536.000,0,1},
		{536.500,0,1},
		{537.000,0,1},
		{538.000,0,1},
		{539.000,0,1},
		{540.000,0,1},
		{540.500,0,1},
		{541.000,0,1},
		{541.500,0,1},
		{542.000,0,1},
		{543.000,0,1},
		{544.000,0,1},
		{545.000,0,1},
		{546.000,0,1},
		{547.000,0,1},
		{548.000,0,1},
		{549.000,0,1},
		{550.000,0,1},
		{551.000,0,1},
		{552.000,0,1},
		{553.000,0,1},
		{554.000,0,1},
		{554.250,0,1},
		{554.500,0,1},
		{554.750,0,1},
		{555.000,0,1},
		{555.250,0,1},
		{555.500,0,1},
		{555.750,0,1},
		{556.500,0,1},
		{557.500,0,1},
		{558.000,0,1},
		{559.000,0,1},
		{560.000,0,1},
	}
	plr = {1,2,3,4,5}

	for i,v in ipairs(ckicks) do
		local m = i%2*2-1

		ease {v[1], 1, flip(outCubic), 100*m, 'drunk', 100*m, 'drunkz', -200, 'tiny'}
		add {v[1], 2, outExpo, 500, 'drunkoffset', 500, 'drunkzoffset'}
	end
	set {464, 100, 'reverse', plr={2,5}}

	plr = nil

	-- ease {460, 4, inCirc, 125, 'zoomx'}
	--20, 'rotationz', 


	aux 'cinfluence'
	setdefault {1, 'cinfluence'}
	func {463.5, 556-463.5, function(beat, p)
		for i=1,4 do
			local pn=i
			if i>2 then pn=pn+1 end

			-- p[pn].x = math.sin(beat/4*math.pi + math.pi*2/4*i)*100

			-- if pn==2 then pixelmod.xpos = math.sin(beat/4*math.pi + math.pi/4*i)*100 end

			-- p[pn].rotationz = math.sin(beat/4*math.pi + math.pi*2/4*i)*10
			-- p[pn].tinyx = curtain_val[(i+2)%4]*200
			local cval = curtain_val[(i+2)%4]

			p[pn].zoomx = math.min(lerp(100, cval*400, p[1].cinfluence), 100)

			if beat<524 then
				p[pn].rotationz = cval*45 * p[1].curtainrot
				p[pn].flip = lerp(0, 50 - cval*200, p[1].cinfluence)
			else
				p[pn].rotationz = (-25 + 5*i) * -p[1].curtainrot
			end

			-- if pn==1 then print(curtain_val[(i+2)%4]*400, curtain_val[(i+2)%4]*45) end
		end

		pixelplayer_pos:zoomx( math.min(lerp(1, curtain_val[0]*4, p[1].cinfluence), 1) )

		if beat<524 then
			pixelplayer_pos:rotationz( curtain_val[0]*45 * p[1].curtainrot )
		else
			pixelplayer_pos:rotationz( (-25 + 5*2 )* -p[1].curtainrot )		
		end
	end}

	-------- transition out of curtain
	func {557, function() for i=0,7 do curtain[i]:hidden(1) end end}
	ease {560, 8, outExpo, 1, 'aftzoom', 0, 'aftzoommult'}

	set {560-0.5, 0, 'flip', 0, 'rr_z', 0, 'reverse', 0, 'reverse0', 0, 'reverse1', 0, 'reverse2', 0, 'reverse3', 0, 'rr_y'}

	-- mod_outin(560, 16, 3, 1, 'bgzoom')
	-- mod_outin(560, 16, 123*3, 123, 'bgy')

	ease {560, 12, inOutQuad, 0, 'bgy', 1, 'bgzoom', -1, 'audioheightmult'}
	ease 
	{556.5-1, 2, inOutExpo, 0.75, 'allzoom'}
	{560-2, 2, inExpo, 1, 'allzoom'}

	swap {560.0-0.5, 1, inOutCirc, 'rdul'}
	swap {562.5-0.5, 1, inOutCirc, 'rlud'}

	swap {564.0-0.5, 1, inOutCirc, 'lrud'}
	swap {566.5-0.5, 1, inOutCirc, 'ldur'}

	swap {568.0-0.5, 1, inOutCirc, 'rdul'}
	swap {570.5-0.5, 1, inOutCirc, 'ldur'}

	set {559, 500, 'bumpyxperiod'}
	for i,v in ipairs {560, 562.5, 564, 566.5, 568, 570.5} do
		ease 
		{v-0.5, 0.5, inExpoSnap, -20000, 'tinyz', -200, 'tiny', -1000, 'z', 50, 'vibratex', 500, 'attenuatex', 100, 'shrinklinear', 500*(i%2*2-1), 'bumpyx'}
		{v, 4, outExpo, 0, 'tinyz', 0, 'tiny', 0, 'z', 0, 'vibratex', 0, 'attenuatex', 0, 'shrinklinear', 0, 'bumpyx'}
	end
	for i=0,11 do
		ease 
		{560-0.25+i, 0.25, inExpo, -100 * (i%2*2-1), 'tipsy'}
		{560+i, 2, outExpo, 0, 'tipsy'}
	end

	-- swap {572.0-0.5, 1, inOutCirc, 'ldur'}

	mod_outin(572, 4, 1, 1.25, 'aftzoom')

	plr={1,2,3,4,5}
	reset {572, exclude={'xmodmult', 'bgy', 'bgzoom', 'xmod', 'audiozoommult', 'audioheightmult', 'reverse', 'aftzoom'}}
	plr=nil

	for i=0,7 do
		local v = 576+i/2		
		ease 
		{v, 2, flip(outExpo), -200, 'tiny', plr={1,2,3}}
		-- {v-0.5, 1, inOutExpo, (i+1)%2*100, 'invert', plr={1,2,3}}
	end
	for i=0,15 do
		local v = 580+i/4		
		ease {v, 1, flip(outExpo), -200, 'tiny', plr={1,2,3}}
		-- {v-0.25, 0.5, inOutExpo, (i+1)%2*100, 'invert', plr={1,2,3}}
	end
	for i=0,15 do
		local v = 584+i/8		
		ease {v, 0.5, flip(outExpo), -200, 'tiny', plr={1,2,3}}
		-- {v-0.125, 0.25, inOutExpo, (i+1)%2*100, 'invert', plr={1,2,3}}
	end
	for i=0,31 do
		local v = 586+i/16		
		ease {v, 0.25, flip(outExpo), -200, 'tiny', plr={1,2,3}}
		-- {v-0.125/2, 0.125, inOutExpo, (i+1)%2*100, 'invert', plr={1,2,3}}
	end

	-- ease {572-1, 2, inOutExpo, 100, 'reverse', plr=2}
	set {570, 100, 'reverse', plr=2}
	-- ease {574, 14, inCubic, 360*8, 'rr_y', plr={1,2,3}}

	func {570, 6, outQuad, 1, 0, function(a) redfullprestripe_2:cropbottom(a) redfullstripe_2:cropbottom(a) end}
	func {570, 6, outQuad, -8, 0, function(a) 
		redfullprestripe_2:customtexturerect(0, -a, 1, 16-a)
		redfullstripe_2:customtexturerect(0, -a, 1, 16-a)
	end}
	func {576, 12, inCirc, 0, 50, function(a) 
		redfullprestripe_2:customtexturerect(0, -a, 1, 16-a)
		redfullstripe_2:customtexturerect(0, -a, 1, 16-a)
	end}

	func {576, 12, outSine, 0, 1, function(a) 
		redfullprestripe_2:diffusealpha(outSine(1-a))
		redfullstripe_2:diffusealpha(a)
	end}

	for i=0,2 do
		for _,v in ipairs {576, 577, 577.5, 578, 579} do
			add {v-0.5+i*4, 1, inOutExpo, 100, 'reverse', plr={1,2}}
		end
	end
	plr={1,2}
	reset {588, only={'reverse'}}
	plr=nil

	ease {575-0.5, 1, inOutExpo, 1, 'audioheightmult', plr=1}
	-- set {576, 1, 'audioheightmult', plr=1}
	ease 
	{576, 12, inCubic, 1.5, 'aftzoom'}
	{588, 2, outExpo, 1, 'aftzoom'}

	---------------- i am out of ideas

	----- mandatory forbidden jump
	forbidden:SetTarget( P[3]('NoteField') )
	func {587, 'P[3]:SetAwake', true}
	func {587, function() 
		P[3]:SetHiddenRegions({{593, 608}})
	end}
	func {592, function() 
		P[3]:ClearHiddenRegions()
	end}
	func {588, 'forbidden:hidden', 0}

	func {616, function() 
		P[3]:SetHiddenRegions({{625, 776}})
	end}
	func {624, function() 
		P[3]:ClearHiddenRegions()
	end}

	plr=3

	set {587, 100, 'hidemines', 90, 'rr_x', 500, 'zoomz', -10, 'y', 40, 'flip', 100, 'dark', 12000, 'attenuatex', 100, 'drawsize', 75, 'stealth', 157, 'confusionoffset1', 157, 'confusionoffset2', -2, 'movex1', 2, 'movex0', -2, 'movex3', 2, 'movex2'}
	ease {591-1, 2, inOutExpo, 0, 'confusionoffset1', 0, 'confusionoffset2', 0, 'movex0', 0, 'movex1', 0, 'movex2', 0, 'movex3'}
	ease 
	{592, 0, instant, 100, 'stealth'}
	{592, 1, outExpo, 75, 'stealth'}

	-- set {592.5, 100, 'hidenoteflash'}

	if slumpage then		
		set {620, 0, 'hidemines', 157, 'confusionoffset1', 157, 'confusionoffset2', -2, 'movex1', 2, 'movex0', -2, 'movex3', 2, 'movex2'}
		ease {623-1, 2, inOutExpo, 0, 'confusionoffset1', 0, 'confusionoffset2', 0, 'movex0', 0, 'movex1', 0, 'movex2', 0, 'movex3'}
	end

	plr=nil

	func {588-0.5, 1, inOutExpo, 0, 1, function(a) 
		lasercover:diffusealpha(a)
		lasercover_mask:zoomto(sw, sh*a)
	end}
	func {589, 'pixelplayer:hidden', 1}

	ease {588-0.5, 1, inOutExpo, 125, 'zoom', plr={1,4,5}}
	set 
	{588, -32, 'x', plr=4}
	{588, 32, 'x', plr=5}

	---- mask laser funny 2
	ease {588, 4, flip(inCirc), 75, 'zoom'}

	set {588, 123*2, 'bgy', 2, 'bgzoom'}
	func {588, function() whitemoon_1:hidden(0) whitemoon_2:hidden(0) end}

	func {588, 3, inQuad, 0, 0.5, function(a) lasergradient:diffusealpha(a) end}
	func {591, 1, linear, 0.5, 0, function(a) lasergradient:diffusealpha(a) end}

	ease {620, 4, flip(inCirc), 75, 'zoom'}

	func {620, 3, inQuad, 0, 0.5, function(a) lasergradient:diffusealpha(a) end}
	func {623, 1, linear, 0.5, 0, function(a) lasergradient:diffusealpha(a) end}

	if slumpage then
		func {588, function() 
			P[1]:SetHiddenRegions({ {591.5, 592.5}, {623.5, 624.5} })
		end}
	end	

	audiocircle_proxy:SetTarget(red_section_1)
	func {592, 'audiocircle_proxy:hidden', 0}
	ease {592-0.5, 1, inOutCirc, 1.5, 'audiocircleradius'}

	func {592-1, 2, inOutExpo, 0, 1, function(a) 
		redexpand_1:zoomto( sw*a, 200 )

		squareloop_1:cropleft( 1*(1-a) )
		squareloop_2:cropright( 1*(1-a) )

		redstripe_l:cropright(1*(1-a))
		redstripe_r:cropleft(1*(1-a))

		-- circlescroll:diffusealpha(a*0.2)
	end}
	func {592, 128, function(beat, p) 
		local r = p[1].redaux

		-- if beat<272 then
			-- circlescroll:diffusealpha(r*0.5)
		-- end
		redgradient:diffusealpha(r)

		local rx = math.random(-2,2)
		local ry = math.random(-2,2)

		redsource_af:x2( r*rx )
		redsource_af:y2( r*ry)

		audiocircle_linefill:xy2( -r*rx, -r*ry )
		audiocircle_linemask:xy2( -r*rx, -r*ry )
		redgradient:xy2( -r*rx, -r*ry )
	end}

	func {620-0.5, 1, inOutCirc, 0, 1, function(a) audiocircle_cover:diffusealpha(a) end}
	func {624-0.5, 1, inOutCirc, 1, 0, function(a) audiocircle_cover:diffusealpha(a) end}

	func {604-0.5, 1, inOutCirc, 0, 0.75, function(a) forbidden_cover:diffusealpha(a) end}
	func {608-0.5, 1, inOutCirc, 0.75, 0, function(a) forbidden_cover:diffusealpha(a) end}

	func {616-0.5, 1, inOutCirc, 0, 0.75, function(a) forbidden_cover:diffusealpha(a) end}
	func {620-0.5, 1, inOutCirc, 0.75, 0, function(a) forbidden_cover:diffusealpha(a) end}

	func {636-0.5, 1, inOutCirc, 0, 0.75, function(a) forbidden_cover:diffusealpha(a) end}
	func {640-0.5, 1, inOutCirc, 0.75, 0, function(a) forbidden_cover:diffusealpha(a) end}

	-- func {588, 'bg_hide:hidden', 1}
	-- func {588, 'water_sprite:hidden', 1}
	-- func {588, 'bloomh_sprite:hidden', 1}

	-- func {588, 'laser_redgradient:diffusealpha', 1}
	-- func {588, 'laser_circlescroll:diffusealpha', 0.25}

	laserbighit:croptop(0.05) laserbighit:cropbottom(0.05)		
	laserbighit:fadetop(0.1) laserbighit:fadebottom(0.1)	

	func {592.0, 0.5, outExpo, 0, 350, function(a) laserbighit:zoomto(sw, a) end}
	func {592.5, 0.5, inExpo, 350, 0, function(a) laserbighit:zoomto(sw, a) end}

	func {608.0, 0.5, outExpo, 0, 350, function(a) laserbighit:zoomto(sw, a) end}
	func {608.5, 0.5, inExpo, 350, 0, function(a) laserbighit:zoomto(sw, a) end}

	func {624.0, 0.5, outExpo, 0, 350, function(a) laserbighit:zoomto(sw, a) end}
	func {624.5, 0.5, inExpo, 350, 0, function(a) laserbighit:zoomto(sw, a) end}

	for i,v in ipairs {592, 608, 624} do
		plr=1
		mod_outin(v, 1, 125, 175, 'zoom', outExpo, inExpo)
		-- mod_outin(v, 1, 0, 20, 'reverse', outExpo, inExpo)
		-- mod_outin(v, 1, 0, -50, 'flip', outExpo, inExpo)
		mod_outin(v, 1, 0, -5000, 'tinyz', outExpo, inExpo)
		mod_outin(v, 1, 0, -200, 'tiny', outExpo, inExpo)
		mod_outin(v, 1, 0, -500, 'z', outExpo, inExpo)
		mod_outin(v, 1, 0, 10, 'rotationz', outExpo, inExpo)
		mod_outin(v, 1, 0, 150, 'vibratex', outExpo, inExpo)
		plr=nil
	end

	-- laser
	func {592, 'bloomlaser_sprite:hidden', 1}
	func {592, 'bloomlaser_sprite:GetShader():uniform1f', 'var', 200}

	ease {592-0.5, 1, inOutExpo, 1, 'aftzoommult'}

	laser_bodycon:SetDrawByZPosition(true)
	for i=1,#laser do
		-- laser[i].body:cropleft(0.01) laser[i].body:cropright(0.01)
		-- laser[i].body:fadeleft(0.1) laser[i].body:faderight(0.1)

		laser[i].glow:zoomx(0)
		laser[i].glow:diffusealpha(0.1)
		laser[i].glow:blend('add')
	end

	local function dolaser(beat, len, i, x, c)
		local beat,len,x,i = beat,len,x,i
		func {beat-0.5, function() 
			laser[i].body:x(x)
			for cur=1,#laser do
				if cur==i then
					laser[i].body:z(5)
				else
					laser[i].body:z(0)
				end
			end

			laser[i].body:diffuse(c[1], c[2], c[3], 1)
		end}
		func {beat-0.5, 0.5, inExpo, 0, 1, function(a) 
			laser[i].body:zoomto(200*a, sh)
		end}
		func {beat, len, outExpo, 1, 0, function(a) 
			laser[i].body:zoomto(350*a, sh)
		end}
		func {beat, len*0.25, outExpo, 1, 0, function(a) 
			bloomlaser_sprite:diffusealpha(a)
		end}
		-- func {beat, len*0.5, outCirc, 1, 0, function(a) 
		-- -- 	laser[i].glow:zoomx(4*a)
		-- -- end}
	end

	-- dolaser(594, 2, 1, 0, {0,0,0})
	local laserb = {
		{593.000,0,1},
		{593.500,0,1},
		{594.000,0,1},
		{594.250,0,1},
		{594.500,0,1},
		{594.750,0,1},
		{595.000,0,1},
		{595.500,0,1},
		{595.750,0,1},
		{596.000,0,1},
		{596.500,0,1},
		{596.750,0,1},
		{597.000,0,1},
		{597.500,0,1},
		{598.000,0,1},
		{598.250,0,1},
		{598.500,0,1},
		{598.750,0,1},
		{599.000,0,1},
		{599.500,0,1},
		{599.750,0,1},
		{600.000,0,1},
		{600.500,0,1},
		{600.750,0,1},
		{601.000,0,1},
		{601.500,0,1},
		{602.000,0,1},
		{602.250,0,1},
		{602.500,0,1},
		{602.750,0,1},
		{603.000,0,1},
		{603.500,0,1},
		{609.000,0,1},
		{609.500,0,1},
		{610.000,0,1},
		{610.250,0,1},
		{610.500,0,1},
		{610.750,0,1},
		{611.000,0,1},
		{611.500,0,1},
		{611.750,0,1},
		{612.000,0,1},
		{612.500,0,1},
		{612.750,0,1},
		{613.000,0,1},
		{613.500,0,1},
		{614.000,0,1},
		{614.250,0,1},
		{614.500,0,1},
		{614.750,0,1},
		{615.000,0,1},
		{615.500,0,1},
		{615.750,0,1},
		{625.000,0,1},
		{625.500,0,1},
		{626.000,0,1},
		{626.250,0,1},
		{626.500,0,1},
		{626.750,0,1},
		{627.000,0,1},
		{627.500,0,1},
		{627.750,0,1},
		{628.000,0,1},
		{628.500,0,1},
		{628.750,0,1},
		{629.000,0,1},
		{629.500,0,1},
		{630.000,0,1},
		{630.250,0,1},
		{630.500,0,1},
		{630.750,0,1},
		{631.000,0,1},
		{631.500,0,1},
		{631.750,0,1},
		{632.000,0,1},
		{632.500,0,1},
		{632.750,0,1},
		{633.000,0,1},
		{633.500,0,1},
		{634.000,0,1},
		{634.250,0,1},
		{634.500,0,1},
		{634.750,0,1},
		{635.000,0,1},
		{635.500,0,1},
		{641.000,0,1},
		{641.500,0,1},
		{642.000,0,1},
		{642.250,0,1},
		{642.500,0,1},
		{642.750,0,1},
		{643.000,0,1},
		{643.500,0,1},
		{643.750,0,1},
		{644.000,0,1},
		{644.500,0,1},
		{644.750,0,1},
		{645.000,0,1},
		{645.500,0,1},
		{646.000,0,1},
		{646.250,0,1},
		{646.500,0,1},
		{646.750,0,1},
		{647.000,0,1},
		{647.500,0,1},
		{647.750,0,1},
		{648.000,0,1},
		{648.500,0,1},
		{648.750,0,1},
		{649.000,0,1},
		{649.500,0,1},
		{650.000,0,1},
		{650.333,0,1},
		{650.667,0,1},
		{651.000,0,1},
		{651.333,0,1},
		{651.667,0,1},
	}
	local function randomXD(t)
		if t == 0 then return 0.5 else
		return modulo(math.sin(t * 3229.3) * 43758.5453, 1) end
	end
	local laserc = { [0]={0,0,0}, {0,1,0}, {0,0,1} }
	for i,v in ipairs(laserb) do
		local ni = i-1
		local m = i%2*2-1

		if v[1]<640 then
			dolaser(v[1], 1.5, i%8+1, randomXD(v[1]*4435752) * 120 * m, laserc[i%3])

			plr={1,4,5}
			ease {v[1], 1, flip(outExpo), -20000, 'tinyz', -500*2, 'z'}
			ease {v[1], 2, flip(outExpo), 1, 'redaux'}

			local rval = 5
			if v[1]>608 then rval = 10 end
			if v[1]>624 then rval = 15 end
			ease {v[1]-0.125, 0.25, inOutExpo, rval*m, 'rotationz'}
			-- add {v[1]-0.125, 0.25, inOutExpo, 100*m, 'flip'}

			-- for c=0,3 do
			-- 	for Wenis=1,3 do
			-- 		local pn = Wenis>1 and Wenis+2 or Wenis
			-- 		ease {v[1], 1, flip(outExpo), math.random(-157,157), 'confusionxoffset'..c, math.random(-157,157), 'confusionyoffset'..c, plr=pn}
			-- 	end
			-- end
			plr=nil
		end

		-- for c=0,3 do
		-- 	for Wenis=1,3 do
		-- 		local pn = Wenis>1 and Wenis+2 or Wenis
		-- 		ease {v[1], 1, flip(outExpo), math.random(-628,628), 'confusionoffset'..c, math.random(-100,100), 'confusionxoffset'..c, math.random(-100,100), 'confusionyoffset'..c, plr=pn}
		-- 	end
		-- end
	end

	plr={1,4,5}
	reset {592, only={'reverse', 'rr_x'}}
	add {608-1, 2, inOutExpo, 180, 'rr_x'}

	ease 
	{593-0.5, 1, inOutExpo, 0, 'dizzy'}
	{607-0.5, 1, inOutExpo, 0, 'dizzy'}
	{609-0.5, 1, inOutExpo, 400, 'dizzy'}
	{619-0.5, 1, inOutExpo, 0, 'dizzy'}
	{625-0.5, 1, inOutExpo, 800, 'dizzy'}

	for i=0,1 do
		ease 
		{627-1+i*4, 2, inOutExpo, 100, 'reverse'}
		{628-1+i*4, 2, inOutExpo, 0, 'reverse'}
	end
	-- plr={1,4}
	-- add {624-1, 2, inOutExpo, 180, 'rr_x'} --{624-1, 2, inOutExpo, 50, 'stealth', plr=5}

	-- if not slumpage then
	-- 	plr=4
	-- 	swap {625-1, 2, inOutExpo, 'rudl'}
	-- 	-- plr=5
	-- 	-- swap {625-1, 2, inOutExpo, 'rudl'}
	-- end
	set {620, 0, 'rotationz', 270, 'rr_x'}
	ease {620, 4, outCirc, 360, 'rr_x'}

	plr=nil

	-- prox
	laserfgproxy:SetTarget(P[2]('NoteField'))
	laserfgproxy:xy(scx,scy)
	laserfgproxy:zoom(0.9)

	func {593, 'laserfgproxy:hidden', 0}
	func {503, function() P[2]:SetHiddenRegions({ {623.5, 624.5} }) end}

	plr=2
	
	reset {592, exclude={'xmodmult', 'xmod', 'bgy', 'bgzoom'}}

	set {592, 0, 'zoomx', 100, 'zoomy'}
	ease 
	{604, 2, outExpo, 100, 'zoomx'}
	{607-0.5, 1, inOutExpo, 150, 'zoomx'}
	{608-0.5, 1, inOutExpo, 0, 'zoomx'}

	{604, 4, flip(outExpo), -90, 'rotationz'}

	for i=0,5 do
		ease {604-0.25+i/2, 0.5, inOutExpo, (i+1)%2*100, 'invert'}
	end

	add {607-1, 2, inOutExpo, 360, 'rr_y', 100, 'reverse'}

	ease 
	{616-0.5, 1, inOutExpo, 100, 'zoomx'}
	{620-0.5, 1, inOutExpo, 0, 'zoomx'}

	set {615, 100, 'digitaloffset', 100, 'digitalzoffset', 100, 'reverse'}
	for i,v in ipairs {616, 616.75, 617.5, 618.25, 619, 619.333, 619.667, 620} do		
		local m = v==620 and 0 or 1

		ease {v-0.25, 0.5, inOutCirc, 100*(i%2*2-1)*m, 'digital', 200*(i%2*2-1)*m, 'digitalz'}
		add {v-1, 2, inOutCirc, 150, 'digitalzoffset'}
	end

	set {635, 0, 'reverse'}
	ease 
	{636-0.5, 1, inOutExpo, 100, 'zoomx'}
	{640-0.5, 1, inOutExpo, 0, 'zoomx'}

	for i=0,6 do
		-- add {636-0.5+i/2, 1, inOutExpo, 200, 'reverse'}
		ease {636-0.5+i/2, 1, inOutExpo, 100 + (i+1)%2*50, 'zoomx', 50 * ((i+1)%2), 'tinyx'}
		swap {636-0.5+i/2, 1, inOutExpo, i%2==0 and 'ludr' or 'ldur'}
	end

	add 
	{638-1, 2, inOutCirc, 360, 'rr_x'}
	{638, 2, outCubic, 360*2, 'rr_x'}

	plr=nil

	-------- Crt again
	plr = {1,3}
	reset {640, exclude={'xmodmult', 'stealth', 'stealthgr', 'tiny', 'tinyz', 'drawsize', 'rr_z', 'xmod', 'reverse', 'bgy', 'bgzoom'}}
	plr = nil

	func {640-1, 2, inOutExpo, 0, 1, function(a) end_switchit_mask:zoomto(sw,sh*a) end}
	ease {640-1, 2, inOutExpo, 0, 'aftzoommult'}

	func {640-1, 'crt_sprite:hidden', 0}
	func {640-1, 2, inOutCirc, 0, 0.7, function(a) crt_sprite:GetShader():uniform1f('amp', a) end}

	func {639, function() 
		decor[4]:diffusealpha(0) decor[6]:diffusealpha(0) 
	
		for pn=4,5 do
			PP[pn]:hidden(1)
			P[pn]:SetAwake(false)
		end

		audiobars_end_blue:hidden(1)
		audiobars_end_green:hidden(1)

		whitemoon_1:hidden(1)
		whitemoon_2:hidden(1)
	end}
	func {640, function() 	
		forbidden:hidden(1)
		laserfgproxy:hidden(1)

		audiocircle_proxy:hidden(1)
	end}

	func {648-1, 2, inOutCirc, 1, 0, function(a) end_switchit_mask_2:cropright(a) end}

	func {640, 'end_wave_shader_green:hidden', 0}
	func {640, 2, outCubic, 0, 1, function(a) end_wave_shader_green:GetShader():uniform1f('sizemult', a) end}
	func {646, 2, linear, 1, 0, function(a) end_wave_shader_green:GetShader():uniform1f('sizemult', a) end}
	func {648, 'end_wave_shader_green:hidden', 1}

	func {640, 'thinline_green:hidden', 0}
	func {648, 'thinline_green:hidden', 1}

	func {648, 'end_wave_shader_blue:hidden', 0}
	func {648, 2, outCubic, 0, 1, function(a) end_wave_shader_blue:GetShader():uniform1f('sizemult', a) end}
	func {654, 2, inCirc, 1, 0, function(a) end_wave_shader_blue:GetShader():uniform1f('sizemult', a) end}
	func {656, 'end_wave_shader_blue:hidden', 1}

	func {648, 'thinline_blue:hidden', 0}
	func {656, 'thinline_blue:hidden', 1}

	func {640-2, 4, inOutExpo, 0, 0.35, function(a) end_moontransition:zoom(a) end}

	-- set 
	plr={1,3}

	ease {636, 1, outCirc, 100, 'stealth'}

	set
	{334+304, 0, 'zoom', 25, 'drawsize', 20, 'rr_z', 1.25, 'xmod', 100, 'reverse'}
	{334+304, 25, 'stealth', plr=1}
	{334+304, 50, 'stealth', 1, 'stealthgr', plr=3}

	end_mask_player:SetTarget( P[3]('NoteField') )
	func {335+304, 'end_mask_player:hidden', 0}

	ease {336+304-1, 2, inOutCirc, 100, 'zoom'}

	-- ease {336, 6, linear, -200, 'tiny', plr=2}
	add 
	{336+304, 6, linear, -40, 'rr_z'}
	{336+304-1, 2, inOutCirc, -150, 'tiny', -150, 'tinyz', plr=3}

	for i=0,7 do
		add 
		{640 + i, 4, flip(outExpo), -100, 'tiny'}
		{640 + i, 4, flip(outExpo), -100, 'tiny'}
	end
	for i=0,11 do
		ease 
		{640-0.5+i, 0.5, inExpo, 40 + 5*i, 'brake'}
		{640+i, 4, outExpo, 0, 'brake'}
	end
	for i=0,31 do
		add {640+i/4, 0.5, outElastic, 800, 'drunkoffset'}
	end
	for i=0,15 do
		add {648+i/8, 0.25, outElastic, 800, 'drunkoffset'}
	end
	for i=0,11 do
		add {650+i/6, 0.167, outElastic, 800, 'drunkoffset'}
	end

	ease 
	{336+304-0.5, 1, inOutCirc, 200, 'drunkz'}
	{336+304, 6, linear, 100, 'drunk', -25, 'flip', 3000, 'drunkoffset', 3000, 'tipsyoffset'}
	{344+304-0.5, 1, inOutCirc, 0, 'drunk', 0, 'tipsy', 0, 'flip', 0, 'drunkz'}
	set {336+304, -100, 'drunkspeed', -100, 'tipsyspeed'}

	for i=0,11 do
		add {640+i, 1, outElastic, 400, 'drunkzoffset'}
	end
	add 
	{646, 4, inOutQuad, 360, 'rr_y'}
	{648, 4, outSine, 360*2, 'rr_y'}
	{648, 4, inCubic, 360*4, 'rr_y'}
	{646, 4, inOutCirc, 180, 'rr_x'}
	{652-2, 2, inCubic, 90, 'rr_x', 0, 'drunkz', 0, 'drunk', 0, 'rr_z', 50, 'flip'}

	reset {652, exclude={'xmodmult', 'bgzoom', 'bgy', 'allzoom'}}

	func {653.5-1.5, 3, inOutCubic, 0, 1, function(a) end_moontransition:zoom(0.35 + a*0.65) crt_sprite:diffusealpha(1-a) crt_sprite:GetShader():uniform1f('amp', (1-a)*0.7) end}
	-- func {654, function() crt_sprite:hidden(1) end}

	plr=nil

	func {652, 'end_mask_player:hidden', 1}
	set {652, 50, 'reverse', 50, 'flip'}

	ease {652-1, 2, inOutCirc, 1.5, 'allzoom'}
	
	set 
	{652, 50, 'reverse', 50, 'flip', 100, 'spiralholds', -100, 'drawsizeback', 0, 'xmod', 200, 'splinextype', 200, 'splineytype', -10, 'y', 100, 'hidemines', 100, 'disablemines'}
	{652, 45, 'rr_z'}
	{652, -500, 'cubicz', 20, 'drawsize', 20, 'arrowpathdrawsize'}

	ease {653.5-1.5, 3, inOutQuad,
		-50, 'movex0', 50, 'movey0',
		50, 'movex1', 50, 'movey1',
		-50, 'movex2', -50, 'movey2',
		50, 'movex3', -50, 'movey3', 100, 'arrowpath',

		0.75, 'xmod', 50, 'brake'
	}

	func {652, function() 
		for pn=1,2 do
			local p = P[pn]

			-- leftright
			p:SetXSpline(1, 0, -1500, 1500, -1)
			p:SetXSpline(1, 3,  1500, 1500, -1)

			-- p:SetYSpline(1, 0, 5000, 1500, -1)
			-- p:SetYSpline(1, 3, -5000, 1500, -1)
			-- updown
			p:SetYSpline(1, 2, -1500, 1500, -1)
			p:SetYSpline(1, 1,  1500, 1500, -1)

			-- p:SetXSpline(1, 2, -5000, 1500, -1)
			-- p:SetXSpline(1, 1,  5000, 1500, -1)

			-- gradient
			for c=0,3 do
				for _,f in ipairs {'Path', 'Arrow'} do
					p['SetNum'..f..'GradientPoints'](p, c, 3)

					p['Set'..f..'GradientPoint'](p, 0, c, 0)
					p['Set'..f..'GradientPoint'](p, 1, c, 5)
					p['Set'..f..'GradientPoint'](p, 2, c, 6.5)

					p['Set'..f..'GradientColor'](p, 0, c, 1,1,1,1)
					p['Set'..f..'GradientColor'](p, 1, c, 1,1,1,1)
					p['Set'..f..'GradientColor'](p, 2, c, 1,1,1,0)
				end
			end
		end
	end}

	func {626, 'bloomh_sprite:hidden', 1}
	func {626, 'water_con:hidden', 1}

	func {626, 'endmoon:hidden', 0}
	func {626, 'endmoonglow:hidden', 0}

	ease 
	{656-2, 4, inOutExpo, -45, 'rr_z'}
	{656, 64, outQuad, -360*2, 'rr_z'}

	ease {656, 64, linear, 1, 'allzoom', 123, 'bgy', 1, 'bgzoom'}

	func {656, 60, linear, 0, 1, function(a) end_fadeout:diffusealpha(a) end}
	set {656, 50, 'dark'}
	ease {656, 60, linear, 0, 'arrowpath', 100, 'dark', 50, 'zoom'}

	-------- jumpscare
	reset {718, exclude={'xmodmult'}}
	set {718, 10, 'xmod', 100, 'disablemines', 100, 'dark', 100, 'splinexreset', 100, 'splineyreset'}

	ease {719, 1, inExpo, 200, 'zoom', -50000, 'tinyz'}
	ease {720, 4, flip(inQuad), 100, 'vibratex', 20, 'stealth', 100, 'stealthgr'}

	func {718, function() screenhide:zoomto(0,sh) screenhide:diffuse(0,0,0,1) screenhide:hidden(0) end}
	func {728-1, 2, inOutCirc, 0,1, function(a) screenhide:zoomto(sw*a, sh) end}

	for c=0,3 do
		func {718, 'P[1]:SetNumStealthGradientPoints', c, 0}
	end

	glitch_sprite:SetTexture( glitch_aft:GetTexture() )
	
	func {720, 4, outQuad, 1, 0, function(a) glitch_sprite:GetShader():uniform1f('amp2', 0.5*a) end}
	
	if slumpage then func {720, 'kewscare:hidden', 0} end

	-- no jumpscare difficulty	
	if GAMESTATE:GetCurrentSteps(0):GetDifficulty()==2 or GAMESTATE:GetCurrentSteps(1):GetDifficulty()==2 or GAMESTATE:GetCurrentSteps(0):GetDifficulty()==4 or GAMESTATE:GetCurrentSteps(1):GetDifficulty()==4 then
		func {715, 'screenhide:diffuse', 0,0,0,0}
		func {716, 'screenhide:hidden', 0}
		func {716, 'screenhide:zoomto', sw, sh}
		
		func {716, 2, inOutCirc, 0, 1, function(a) screenhide:diffusealpha(a) end}

		func {718, function() GAMESTATE:FinishSong() GAMESTATE:SetSongBeat(99999) end}
	end

	-- slumpage stuff
	if slumpage then
		aux 'xmodmult'
		setdefault {1, 'xmodmult'}
		func {0, 999, function(b, p) 
			for pn=1,5 do
				p[pn].xmod = p[pn].xmod * p[1].xmodmult
				pixelmod.xmodmult = p[1].xmodmult
			end
		end}

		ease 
		{156-0.5, 1, inOutCirc, 1.25, 'xmodmult'}
		{223-0.5, 1, inOutCirc, 1, 'xmodmult'}
		{286-0.5, 1, inOutCirc, 1.25, 'xmodmult'}
		{336-0.5, 1, inOutCirc, 1.5, 'xmodmult'}
		{352-0.5, 1, inOutCirc, 1, 'xmodmult'}
		{400-0.5, 1, inOutCirc, 1.125, 'xmodmult'}
		{460-0.5, 1, inOutCirc, 1, 'xmodmult'}
		{528-0.5, 1, inOutCirc, 1.25, 'xmodmult'}
		{556-0.5, 1, inOutCirc, 1, 'xmodmult'}
		{572-0.5, 1, inOutCirc, 1.5, 'xmodmult'}
		{588-0.5, 1, inOutCirc, 1.25, 'xmodmult'}
		{640-0.5, 1, inOutCirc, 1.5, 'xmodmult'}
		{652-0.5, 1, inOutCirc, 1, 'xmodmult'}
	end

	-- PP[1]:hidden(1)
	-- PP[2]:hidden(1)

	-- func {640, function() end_mask_player:hidden(1) PP[1]:hidden(1) end}
	----- i forgor
	card {0, 64, 'normal dpad', 8, '#FF0000'}
	card {96, 156, 'cant think of anything funny for this section', 12, '#0000AA'}
	card {160, 224, 'normal conveyor', 14, '#FF0000'}
	card {224, 286, 'edm visualizer mod', 12, '#0000AA'}
	card {288, 352, 'how do you graphic design', 13, '#FF00FF'}
	card {368, 398, 'chiptune driven drop mod', 3, '#0000AA'}
	card {400, 460, 'that second section but again', 13, '#FF0000'}
	card {464, 528, 'i call these curtains but theyre just quads', 14, '#FFFFFF'}
	card {528, 560, 'this part was unintentional but it looked cool', 16, '#111111'}
	card {576, 588, 'mfw when this is not done yet', 13, '#FF0000'}
	card {588, 592, 'threatening', 1, '#111111'}
	card {592, 656, 'laser bean', 15, '#FFFFFF'}
	card {656, 712, 'normal dpad again', 8, '#000000'}
	card {720, 728, 'me when Loud Noises', 0, '#FF0000'}

end)"
Type = "ActorFrame"
><children>
	<Layer File="audio.xml" />

	<Layer File="bg" InitCommand="zoomto,SCREEN_WIDTH,SCREEN_HEIGHT;xy,SCREEN_CENTER_X,SCREEN_CENTER_Y" />

	<Layer Type="ActorFrameTexture" Name="audioline_aft" />

	<!-- color mask stuff -->
		<!-- red mask section -->
		<Layer Type="Quad" InitCommand="zoomto,SCREEN_WIDTH,SCREEN_HEIGHT;xy,SCREEN_CENTER_X,SCREEN_CENTER_Y;diffuse,0,0,0,1" />

		<Layer Type="ActorFrame" InitCommand="xy,SCREEN_CENTER_X,SCREEN_CENTER_Y;fov,45" FarDist="9E9" Name="redsource_af"><children>
			<Layer Type="ActorFrame" Name="red_section_1"><children>
				<Layer Type="Sprite" Texture="dust" InitCommand="blend,add;texcoordvelocity,-0.02,-0.02;customtexturerect,0,0,2,2;diffusealpha,0.2" />
				
				<Layer Type="Quad" InitCommand="zoomto,SCREEN_WIDTH,SCREEN_HEIGHT;diffuse,0,0,0,0;clearzbuffer,1" />

				<Layer File="radial" Name="redgradient" InitCommand="zoomto,SCREEN_WIDTH,SCREEN_HEIGHT;diffuse,1,0,0,0" />

				<Layer Type="Quad" InitCommand="y,-90;zoomto,SCREEN_WIDTH,16;zwrite,1;blend,noeffect" />
				<Layer Type="Quad" InitCommand="y,90;zoomto,SCREEN_WIDTH,16;zwrite,1;blend,noeffect" />
				<Layer Type="Quad" InitCommand="x,-SCREEN_CENTER_X+20;zoomto,16,SCREEN_HEIGHT;zwrite,1;blend,noeffect" />
				<Layer Type="Quad" InitCommand="x,SCREEN_CENTER_X-20;zoomto,16,SCREEN_HEIGHT;zwrite,1;blend,noeffect" />
				<Layer Type="Sprite" Name="circlescroll" Texture="circlel" InitCommand="zoomto,SCREEN_WIDTH*2,SCREEN_WIDTH*2;customtexturerect,0,0,96,96;texcoordvelocity,-5,-5;rotationz,-10;ztest,1;diffusealpha,0" />
				
				<Layer Type="Quad" InitCommand="zoomto,SCREEN_WIDTH,SCREEN_HEIGHT;diffuse,0,0,0,0;clearzbuffer,1" />

				<Layer Type = "ActorProxy" Name = "PP[3]" InitCommand="hidden,1" />
				
				<Layer Type="ActorFrame" Name="audiocircle_con" InitCommand="hidden,1"><children>
					<Layer Type="Quad" InitCommand="zoomto,SCREEN_WIDTH,SCREEN_HEIGHT;diffuse,0,0,0,0;clearzbuffer,1" />
					<Layer Type="Polygon" Name="audiocircle_linemask" />	
					
					<Layer Type="Sprite" Name="squareloop_1" Texture="squareloop" InitCommand="y,-90;zoomto,SCREEN_WIDTH,2;customtexturerect,0,0,8*8,1;texcoordvelocity,-4,0;ztest,1;cropleft,1" />
					<Layer Type="Sprite" Name="squareloop_2" Texture="squareloop" InitCommand="y,90;zoomto,SCREEN_WIDTH,2;customtexturerect,0,0,8*8,1;texcoordvelocity,-4,0;ztest,1;cropright,1" />
					
					<Layer Type="Quad" Name="redsidequad_1" InitCommand="zoomto,2,SCREEN_HEIGHT;x,-SCREEN_CENTER_X+20" />
					<Layer Type="Quad" Name="redsidequad_2" InitCommand="zoomto,2,SCREEN_HEIGHT;x,SCREEN_CENTER_X-20" />

					<Layer Type="Polygon" Name="audiocircle_linefill" />		
					<Layer Type="Quad" InitCommand="zoomto,SCREEN_WIDTH,SCREEN_HEIGHT;diffuse,0,0,0,0;clearzbuffer,1" />
				</children></Layer>
			</children></Layer>

			<Layer Type="Quad" InitCommand="zoomto,SCREEN_WIDTH,SCREEN_HEIGHT;diffuse,0,0,0,0;clearzbuffer,1" />

			<Layer Type="Quad" InitCommand="zoomto,SCREEN_WIDTH,SCREEN_HEIGHT;diffuse,1,0,0.25,1;hidden,1" />
			<Layer Type="Sprite" Texture="thinlineloop" InitCommand="hidden,1;zoomto,SCREEN_WIDTH*2,SCREEN_WIDTH*2;customtexturerect,0,0,1,150;texcoordvelocity,0,32;skewy,0.1;diffusealpha,1" />
			<Layer Type="ActorProxy" Name="peek_player" InitCommand="hidden,1" />	

			<Layer Type="ActorFrame" Name="pixel_af"><children>
				<Layer Type="Sprite" Texture="pixel/dust" InitCommand="zoomto,SCREEN_WIDTH,SCREEN_WIDTH;texcoordvelocity,0.04,0.04;customtexturerect,0,0,6,6;diffusealpha,0.2" />

				<Layer File="pixel/moon" InitCommand="zoom,4.5;y,-123" />

				<Layer Type="Quad" InitCommand="zoomto,SCREEN_WIDTH,SCREEN_HEIGHT;diffuse,0,0,0,0.25" />

				<Layer File="pixel/red" Name="pixelgradient" InitCommand="zoomx,10;zoomy,7;y,-70" />
				<Layer File="pixel/waterbackcover" Name="pixelwater" InitCommand="zoom,5;diffusealpha,1" />
				<Layer Type="Sprite" Frag="pixelsine.frag" Texture="pixel/water.png" Name="pixelwater" InitCommand="zoom,5;blend,add;" />
				<Layer File="pixel/watercover" Name="pixelwater" InitCommand="zoom,5;diffusealpha,0.2" />

				<Layer Type="ActorFrame" Name="pixelplayer_pos" InitCommand="fov,45"><children>
					<Layer Type="ActorFrame" Name="pixelplayer"><children>
						<Layer File="pixel/receptor" Name="pixelreceptor" InitCommand="zoom,8" />
						<Layer Type="Sprite" Texture="pixel/arrow" Name="pixelarrow" InitCommand="zoom,8;xy,0,-125" />
						<Layer Type="Sprite" Texture="pixel/mine" Name="pixelmine" InitCommand="zoom,8;xy,0,-125" />
					</children></Layer>

					<Layer File="pixel/explosion" Name="pixelexplosion[1]" InitCommand="zoom,8;xy,-96,-125;rotationz,90;diffusealpha,0;blend,add" />
					<Layer File="pixel/explosion" Name="pixelexplosion[2]" InitCommand="zoom,8;xy,-32,-125;rotationz,0;diffusealpha,0;blend,add" />
					<Layer File="pixel/explosion" Name="pixelexplosion[3]" InitCommand="zoom,8;xy,32,-125;rotationz,180;diffusealpha,0;blend,add" />
					<Layer File="pixel/explosion" Name="pixelexplosion[4]" InitCommand="zoom,8;xy,96,-125;rotationz,270;diffusealpha,0;blend,add" />
				</children></Layer>
				<Layer File="pixel_lightsource" InitCommand="blend,add;zoom,0.3;zoomx,0.5;x,-120;diffusealpha,0.5" />
			</children></Layer>		

			<Layer Type="Quad" Name="lasercover" InitCommand="zoomto,SCREEN_WIDTH,SCREEN_HEIGHT;diffuse,0,0,0,0" />

			<Layer Type="ActorProxy" Name="audiocircle_proxy" InitCommand="hidden,1" />
			<Layer Type="Quad" Name="audiocircle_cover" InitCommand="zoomto,SCREEN_WIDTH,SCREEN_HEIGHT;diffuse,0,0,0,0" />

			<Layer Type = "ActorProxy" Name = "forbidden" InitCommand="hidden,1" />
			<Layer Type="Quad" Name="forbidden_cover" InitCommand="zoomto,SCREEN_WIDTH,SCREEN_HEIGHT;diffuse,0,0,0,0" />

			<Layer Type="Quad" InitCommand="zoomto,SCREEN_WIDTH,SCREEN_HEIGHT;diffuse,0,0,0,0;clearzbuffer,1" />
		</children></Layer>

		<Layer Type="ActorFrameTexture" Name="redsource_aft" OnCommand="%xero.aft" />

		<!-- green mask section -->
		<Layer Type="Quad" InitCommand="zoomto,SCREEN_WIDTH,SCREEN_HEIGHT;xy,SCREEN_CENTER_X,SCREEN_CENTER_Y;diffuse,0,0,0,1" />
		
		<Layer Type="ActorFrame" InitCommand="xy,SCREEN_CENTER_X,SCREEN_CENTER_Y;fov,45" FarDist="9E9" Name="greensource_af"><children>
			<Layer Type="Quad" Name="greenmaskbg" InitCommand="zoomto,SCREEN_WIDTH,SCREEN_HEIGHT;diffuse,#FF00A0" />
			
			<Layer Type="Sprite" Name="thinline_green" Texture="thinlineloop" InitCommand="hidden,1;zoomto,SCREEN_WIDTH*2,SCREEN_WIDTH*2;customtexturerect,0,0,1,300;texcoordvelocity,0,0.5;skewy,0.1;diffusealpha,1" />
			
			<Layer Type="ActorFrame" InitCommand="fov,45;rotationz,0;hidden,1;" Name="audiobars_end_green"><children>
				<Layer Type="Quad" Name="bar" />
			</children></Layer>

			<Layer Type="Quad" InitCommand="y,-SCREEN_CENTER_Y;zoomto,SCREEN_WIDTH,30;diffuse,0,0,0,1;valign,0" />
			<Layer Type="Quad" InitCommand="y,SCREEN_CENTER_Y;zoomto,SCREEN_WIDTH,30;diffuse,0,0,0,1;valign,1" />

			<Layer Type="Sprite" Name="decor[1]" Texture="loopx" InitCommand="diffusealpha,0;zoomto,100,100;customtexturerect,0,0,6,6;align,0,0;xy,-SCREEN_CENTER_X+10,-SCREEN_CENTER_Y+10" />
			<Layer File="design2" Name="decor[4]" InitCommand="zoom,0.35;diffusealpha,0" />
			<Layer Type="Sprite" Name="decor[8]" Texture="thinloopx" InitCommand="diffusealpha,0;zoomto,100,SCREEN_HEIGHT*2;customtexturerect,0,0,20*(100/SCREEN_HEIGHT),40;x,-240;texcoordvelocity,0,-0.5;" />

			<Layer File="bloodtext" Name="bloodtext" File="rtext/1" InitCommand="halign,0;x,-SCREEN_CENTER_X+20;hidden,1" />

			<Layer Type="ActorFrame" Name="smiley"><children>
				<Layer File="smeye" Name="smeye_l" InitCommand="zoom,0.5;xy,-60,-33;diffusealpha,0" />
				<Layer File="smeye" Name="smeye_r" InitCommand="zoom,0.5;xy,60,-33;diffusealpha,0" />
				<Layer Type="Quad" Name="smmouth" InitCommand="zoomto,80,11;diffuse,1,1,1,0;y,43" />
			</children></Layer>

			<Layer File="fword" Name="fword" InitCommand="zoom,1;diffusealpha,0" />

			<Layer File="wmoonhte2" InitCommand="zoom,0.15*2;hidden,1" Name="whitemoon_1" />

			<Layer Type="Quad" InitCommand="zoomto,SCREEN_WIDTH,SCREEN_HEIGHT;diffuse,0,0,0,0;clearzbuffer,1" />
			<Layer Type="ActorProxy" Name="PP[4]" InitCommand="hidden,1" />
			<Layer Type="Quad" InitCommand="zoomto,SCREEN_WIDTH,SCREEN_HEIGHT;diffuse,0,0,0,0;clearzbuffer,1" />

			<Layer File="paper" InitCommand="blend,modulate;hidden,1" />
			<Layer File="glare" Name="screenglare[1]" InitCommand="blend,add;diffusealpha,1;zoomto,SCREEN_WIDTH,SCREEN_WIDTH" />
			<Layer File="ambientglare" Name="screenglare[3]" InitCommand="blend,add;diffusealpha,0.5;zoomto,SCREEN_WIDTH,SCREEN_WIDTH" />
		</children></Layer>

		<Layer Type="ActorFrameTexture" Name="greensource_aft" OnCommand="%xero.aft" />

		<!-- blue mask section -->
		<Layer Type="Quad" InitCommand="zoomto,SCREEN_WIDTH,SCREEN_HEIGHT;xy,SCREEN_CENTER_X,SCREEN_CENTER_Y;diffuse,0,0,0,1" />
		
		<Layer Type="ActorFrame" InitCommand="xy,SCREEN_CENTER_X,SCREEN_CENTER_Y;fov,45" FarDist="9E9" Name="bluesource_af"><children>
			<Layer Type="Quad" InitCommand="zoomto,SCREEN_WIDTH,SCREEN_HEIGHT;diffuse,#111111" />

			<Layer Type="Sprite" Name="thinline_blue" Texture="thinlineloop" InitCommand="hidden,1;zoomto,SCREEN_WIDTH*2,SCREEN_WIDTH*2;customtexturerect,0,0,1,300;texcoordvelocity,0,0.5;skewy,-0.1;diffusealpha,1" />
			
			<Layer Type="ActorFrame" InitCommand="fov,45;rotationz,180;hidden,1;" Name="audiobars_end_blue"><children>
				<Layer Type="Quad" Name="bar" />
			</children></Layer>

			<Layer Type="Quad" InitCommand="y,-SCREEN_CENTER_Y;zoomto,SCREEN_WIDTH,30;diffuse,0,0,0,1;valign,0" />
			<Layer Type="Quad" InitCommand="y,SCREEN_CENTER_Y;zoomto,SCREEN_WIDTH,30;diffuse,0,0,0,1;valign,1" />

			<Layer File="design1" Name="decor[2]" InitCommand="zoom,0.40;rotationz,-45*5;xy,320,200;diffusealpha,0" />
			<Layer File="design2" Name="decor[3]" InitCommand="zoom,0.35;diffusealpha,0;hidden,1" />

			<Layer File="design3" Name="decor[5]" InitCommand="zoom,0.5;halign,1;x,SCREEN_CENTER_X-10;diffusealpha,0" />

			<Layer File="corner" Name="decor[6]" InitCommand="zoomx,-0.6;zoomy,0.6;xy,SCREEN_CENTER_X-30,-SCREEN_CENTER_Y+30;diffusealpha,0" />

			<Layer File="moontext" Name="moontext" File="rtext/2" InitCommand="halign,1;x,SCREEN_CENTER_X-20;hidden,1" />	

			<Layer Type="ActorProxy" Name="smileyproxy" OnCommand="%xero(function(self) 
				self:SetTarget(smiley)
			end)" />	

			<Layer File="wmoonhite" InitCommand="zoom,0.15*2;hidden,1" Name="whitemoon_2" />

			<Layer Type="Quad" InitCommand="zoomto,SCREEN_WIDTH,SCREEN_HEIGHT;diffuse,0,0,0,0;clearzbuffer,1" />
			<Layer Type="ActorProxy" Name="PP[5]" InitCommand="hidden,1" />
			<Layer Type="Quad" InitCommand="zoomto,SCREEN_WIDTH,SCREEN_HEIGHT;diffuse,0,0,0,0;clearzbuffer,1" />

			<Layer File="paper" InitCommand="blend,modulate;hidden,1" />
			<Layer File="glare" Name="screenglare[2]" InitCommand="blend,add;diffusealpha,1;zoomto,SCREEN_WIDTH,SCREEN_WIDTH" />
			<Layer File="ambientglare" Name="screenglare[4]" InitCommand="blend,add;diffusealpha,0.5;zoomto,SCREEN_WIDTH,SCREEN_WIDTH" />
		</children></Layer>

		<Layer Type="ActorFrameTexture" Name="bluesource_aft" OnCommand="%xero.aft" />

		<!-- mask texture section -->
		<Layer Type="Quad" InitCommand="zoomto,SCREEN_WIDTH,SCREEN_HEIGHT;xy,SCREEN_CENTER_X,SCREEN_CENTER_Y;diffuse,0,0,0,1" />
		
		<Layer Type="ActorFrame" InitCommand="xy,SCREEN_CENTER_X,SCREEN_CENTER_Y;fov,45" FarDist="9E9" Name="masktexture_af"><children>
			<Layer Type="Polygon" Name="audiocircle" />
			<Layer Type="Quad" Name="redexpand_1" InitCommand="diffuse,1,0,0,1;zoomto,0,200" />

			<Layer Type="Sprite" Texture="stripe" Name="redstripe_l" InitCommand="x,-SCREEN_CENTER_X+10;zoomto,100,SCREEN_HEIGHT*2;customtexturerect,0,0,1,32;halign,0;diffuse,1,0,0,1;skewy,0.02;cropright,1;texcoordvelocity,0,10" />
			<Layer Type="Sprite" Texture="stripe" Name="redstripe_r" InitCommand="x,SCREEN_CENTER_X-10;zoomto,100,SCREEN_HEIGHT*2;customtexturerect,0,0,1,32;halign,1;diffuse,1,0,0,1;skewy,0.02;cropleft,1;texcoordvelocity,0,-10" />
		
			<Layer Type="Sprite" Texture="preblurstripe" Name="redfullprestripe" InitCommand="zoomto,SCREEN_WIDTH*4,SCREEN_WIDTH*4;customtexturerect,0,0,1,32;diffuse,1,0,0,1;cropbottom,1" />
			<Layer Type="Sprite" Texture="blurstripe" Name="redfullstripe" InitCommand="zoomto,SCREEN_WIDTH*4,SCREEN_WIDTH*4;customtexturerect,0,0,1,32;diffuse,1,0,0,0;cropbottom,1" />
		
			<Layer File="receptorpeek" Name="redreceptorpeek" InitCommand="zoomy,0;y,-190;diffuse,1,0,0,1;hidden,1" />

			<!-- nintendo switch -->
			<Layer Type="Quad" Name="switchit_green" InitCommand="cropright,0.5;zoomto,SCREEN_WIDTH,SCREEN_HEIGHT;diffuse,0,1,0,1;croptop,0.5;cropbottom,0.5" />
			<Layer Type="Quad" Name="switchit_blue" InitCommand="cropleft,0.5;zoomto,SCREEN_WIDTH,SCREEN_HEIGHT;diffuse,0,0,1,1;croptop,0.5;cropbottom,0.5" />
					
			<Layer Type="Sprite" Name="switchit_green_scroll" Texture="smallcircle" InitCommand="cropright,0.5;zoomto,SCREEN_WIDTH,SCREEN_WIDTH;diffuse,0,0,1,1;customtexturerect,0,0,8,8;texcoordvelocity,-0.2,-0.2;croptop,0.5;cropbottom,0.5" />
			<Layer Type="Sprite" Name="switchit_blue_scroll" Texture="smallplus" InitCommand="cropleft,0.5;zoomto,SCREEN_WIDTH,SCREEN_WIDTH;diffuse,0,1,0,1;customtexturerect,0,0,8,8;texcoordvelocity,-0.2,-0.2;croptop,0.5;cropbottom,0.5" />
		
			<Layer Type="Quad" Name="decor[7]" InitCommand="zoomto,120,SCREEN_HEIGHT*2;x,-240;diffuse,0,1,0,0" />

			<Layer Type="Sprite" Texture="white" Name="wave_shader_green" 
				Frag="wave.frag" InitCommand="zoomto,SCREEN_WIDTH,SCREEN_WIDTH;hidden,1"
				OnCommand="%function(self) self:GetShader():uniform3f('colmult', 0, 1, 0) end" />
			<Layer Type="Sprite" Texture="white" Name="wave_shader_blue" 
				Frag="wave.frag" InitCommand="zoomto,SCREEN_WIDTH,SCREEN_WIDTH;hidden,1"
				OnCommand="%function(self) self:GetShader():uniform3f('colmult', 0, 0, 1) end" />

			<Layer Type="ActorFrame" InitCommand="fov,45;rotationz,90;hidden,1;" Name="audiobars_green"><children>
				<Layer Type="Quad" Name="bar" />
			</children></Layer>
			<Layer Type="ActorFrame" InitCommand="fov,45;rotationz,-90;hidden,1;" Name="audiobars_blue"><children>
				<Layer Type="Quad" Name="bar" />
			</children></Layer>

			<Layer Type="ActorFrame" Name="switchit_diag_green"><children>
				<Layer Type="Quad" Name="diagg" />
			</children></Layer>

			<Layer Type="ActorFrame" Name="switchit_diag_blue"><children>
				<Layer Type="Quad" Name="diagb" />
			</children></Layer>

			<Layer Type="Sprite" Texture="scream" Name="scream[1]" InitCommand="y,-SCREEN_HEIGHT;x,5;zoomto,SCREEN_WIDTH,SCREEN_HEIGHT;customtexturerect,0,0,1,8;diffuse,0,0,1,1;cropright,0.5" />
			<Layer Type="Sprite" Texture="scream" Name="scream[2]" InitCommand="y,-SCREEN_HEIGHT;x,5;zoomto,SCREEN_WIDTH,SCREEN_HEIGHT;customtexturerect,0,0,1,8;diffuse,0,1,0,1;cropleft,0.5" />
					
			<Layer Type="Quad" InitCommand="zoomto,SCREEN_WIDTH,SCREEN_HEIGHT;diffuse,0,0,0,0;clearzbuffer,1" />
			<Layer Type="ActorProxy" Name="mask_player" InitCommand="hidden,1" />
			<Layer Type="Quad" InitCommand="zoomto,SCREEN_WIDTH,SCREEN_HEIGHT;diffuse,0,0,0,0;clearzbuffer,1" />

			<Layer File="transitioncircle" Name="moontransition" InitCommand="zoom,0" />

			<Layer Type="ActorFrame" Name="pixelwindow_af" InitCommand="y2,-SCREEN_HEIGHT;y,-SCREEN_HEIGHT"><children>
				<Layer Type="Quad" Name="pixelwindow" InitCommand="y,SCREEN_HEIGHT;zoomto,256+32,400;diffuse,1,0,0,1" />
			</children></Layer>

			<Layer Type="ActorFrame" Name="maskcurtain_af"><children>
				<Layer Type="Sprite" Texture="white" Name="curtain[0]" />
				<Layer Type="Sprite" Texture="white" Name="curtain[1]" />
				<Layer Type="Sprite" Texture="white" Name="curtain[2]" />
				<Layer Type="Sprite" Texture="white" Name="curtain[3]" />
				<Layer Type="Sprite" Texture="white" Name="curtain[4]" InitCommand="hidden,1" />
				<Layer Type="Sprite" Texture="white" Name="curtain[5]" InitCommand="hidden,1" />
				<Layer Type="Sprite" Texture="white" Name="curtain[6]" InitCommand="hidden,1" />
				<Layer Type="Sprite" Texture="white" Name="curtain[7]" InitCommand="hidden,1" />
			</children></Layer>

			<Layer Type="Quad" Name="mask_inter" InitCommand="zoomto,SCREEN_WIDTH,0;diffuse,0,0,0,1" />

			<!--<Layer Type="Quad" InitCommand="zoomto,SCREEN_WIDTH,SCREEN_HEIGHT;diffuse,1,0,0,1" />-->			
			<Layer Type="Sprite" Texture="preblurstripe" Name="redfullprestripe_2" InitCommand="zoomto,SCREEN_WIDTH*4,SCREEN_WIDTH*4;customtexturerect,0,0,1,32;diffuse,1,0,0,1;cropbottom,1" />
			<Layer Type="Sprite" Texture="blurstripe" Name="redfullstripe_2" InitCommand="zoomto,SCREEN_WIDTH*4,SCREEN_WIDTH*4;customtexturerect,0,0,1,32;diffuse,1,0,0,0;cropbottom,1" />

			<Layer Type="Quad" Name="lasercover_mask" InitCommand="zoomto,SCREEN_WIDTH,0;diffuse,1,0,0,1" />
			<Layer File="lasergradient" Name="lasergradient" InitCommand="zoomto,SCREEN_WIDTH,SCREEN_HEIGHT;diffuse,0,0,0,0" />

			<Layer Type="Quad" Name="laserbighit" InitCommand="zoomto,SCREEN_WIDTH,0;diffuse,0,0,0,1" />

			<Layer Type="ActorFrame" Name="laser_bodycon"><children>
				<Layer Type="Quad" InitCommand="zoomto,0,SCREEN_HEIGHT" Name="laser[1]['body']" />
				<Layer Type="Quad" InitCommand="zoomto,0,SCREEN_HEIGHT" Name="laser[2]['body']" />
				<Layer Type="Quad" InitCommand="zoomto,0,SCREEN_HEIGHT" Name="laser[3]['body']" />
				<Layer Type="Quad" InitCommand="zoomto,0,SCREEN_HEIGHT" Name="laser[4]['body']" />
				<Layer Type="Quad" InitCommand="zoomto,0,SCREEN_HEIGHT" Name="laser[5]['body']" />
				<Layer Type="Quad" InitCommand="zoomto,0,SCREEN_HEIGHT" Name="laser[6]['body']" />
				<Layer Type="Quad" InitCommand="zoomto,0,SCREEN_HEIGHT" Name="laser[7]['body']" />
				<Layer Type="Quad" InitCommand="zoomto,0,SCREEN_HEIGHT" Name="laser[8]['body']" />
			</children></Layer>

			<Layer Type="Quad" Name="end_switchit_mask" InitCommand="zoomto,SCREEN_WIDTH,0;diffuse,0,0,1,1" />
			<Layer Type="Quad" Name="end_switchit_mask_2" InitCommand="zoomto,SCREEN_WIDTH,SCREEN_HEIGHT;cropright,1;diffuse,0,1,0,1" />

			<Layer Type="Sprite" Texture="white" Name="end_wave_shader_green" 
				Frag="wave.frag" InitCommand="zoomto,SCREEN_WIDTH,SCREEN_WIDTH;hidden,1"
				OnCommand="%function(self) self:GetShader():uniform3f('colmult', 0, 1, 0) end" />
			<Layer Type="Sprite" Texture="white" Name="end_wave_shader_blue" 
				Frag="wave.frag" InitCommand="zoomto,SCREEN_WIDTH,SCREEN_WIDTH;hidden,1"
				OnCommand="%function(self) self:GetShader():uniform3f('colmult', 0, 0, 1) end" />

			<Layer File="transitioncircle" Name="end_moontransition" InitCommand="zoom,0" />

			<Layer Type="Quad" InitCommand="zoomto,SCREEN_WIDTH,SCREEN_HEIGHT;diffuse,0,0,0,0;clearzbuffer,1" />
			<Layer Type="ActorProxy" Name="end_mask_player" InitCommand="hidden,1" />
			<Layer Type="Quad" InitCommand="zoomto,SCREEN_WIDTH,SCREEN_HEIGHT;diffuse,0,0,0,0;clearzbuffer,1" />
		</children></Layer>

		<Layer Type="ActorFrameTexture" Name="masktexture_aft" OnCommand="%xero.aft" />

	<Layer Type="Quad" InitCommand="zoomto,SCREEN_WIDTH,SCREEN_HEIGHT;xy,SCREEN_CENTER_X,SCREEN_CENTER_Y;diffuse,0,0,0,1;clearzbuffer,1" />

	<!-- moon -->
	<Layer Type="ActorFrame" InitCommand="xy,SCREEN_CENTER_X,SCREEN_CENTER_Y;fov,45" Name="bg"><children>
		<Layer Type="ActorFrame" Name="bg_hide"><children>
			<Layer File="sgrad" InitCommand="zoomto,SCREEN_WIDTH*1.2,SCREEN_HEIGHT*0.7;xy,0,250;diffusealpha,0.5;hidden,1" />
			<Layer File="sgrad" InitCommand="zoomto,SCREEN_WIDTH*1.2,SCREEN_HEIGHT*1.5;xy,0,-60;diffusealpha,1;fadebottom,0.5;cropbottom,0.1" />

			<Layer Type="Sprite" Texture="dust" InitCommand="blend,add;texcoordvelocity,0.01,0.01;customtexturerect,0,0,3,3;diffusealpha,0.2" />
			<Layer Type="Sprite" Texture="dust" InitCommand="blend,add;texcoordvelocity,0.02,0.02;rotationz,32;customtexturerect,0,0,4,4;diffusealpha,0.1" />

			<Layer Type="ActorFrame" InitCommand="xy,SCREEN_CENTER_X,SCREEN_CENTER_Y;fov,45;hidden,1" Name="audioline_con"><children>
				<Layer Type="Polygon" Name="audioline" />
			</children></Layer>

			<Layer Type="ActorFrame" Name="water_con"><children>
				<Layer Type="Sprite" Texture="water.png" InitCommand="zoomz,16;rotationx,0;zoomto,SCREEN_WIDTH*0.7,300;xy,0,200;blend,add;fadeleft,0.5;faderight,0.5;cropleft,0.1;cropright,0.1;texcoordvelocity,0,0.01;customtexturerect,0,0,1,4;" />
				<Layer File="moon" InitCommand="zoom,0.15;xy,0,-123" />
				<Layer File="moon_glow" InitCommand="zoom,0.15;xy,0,-123;blend,add;diffusealpha,0.25" />
				<Layer File="moon_reflect" InitCommand="zoomx,0.2;zoomy,0.3;xy,0,205;blend,add;fadebottom,0.5;cropbottom,0.2;diffusealpha,0.75" />
				<Layer File="moon_reflect" InitCommand="zoomx,0.1;zoomy,0.3;xy,0,205;blend,add;fadebottom,0.5;cropbottom,0.2;diffusealpha,0.2" />

				<Layer File="watercover" InitCommand="zoomto,SCREEN_WIDTH,SCREEN_HEIGHT/2;y,168;diffusealpha,0.75;" />
			</children></Layer>
			
			<Layer File="moon" Name="endmoon" InitCommand="zoom,0.15;xy,0,-123;hidden,1" />
			<Layer File="moon_glow" Name="endmoonglow" InitCommand="zoom,0.15;xy,0,-123;blend,add;diffusealpha,0.25;hidden,1" />
		</children></Layer>

		<Layer Type="Quad" InitCommand="zoomto,SCREEN_WIDTH*2,SCREEN_HEIGHT*2;diffuse,0,0,0,0" Name="end_fadeout" />

		<Layer File="mouth" InitCommand="zoomto,SCREEN_WIDTH,SCREEN_HEIGHT;diffusealpha,0.1;hidden,1" Name="kewscare" />
		
		<Layer File="radial" Name="laser_redgradient" InitCommand="zoomto,SCREEN_WIDTH,SCREEN_HEIGHT;diffuse,1,0,0,0" />
		<Layer Type="Sprite" Name="laser_circlescroll" Texture="circlel" InitCommand="zoomto,SCREEN_WIDTH*2,SCREEN_WIDTH*2;customtexturerect,0,0,96,96;texcoordvelocity,-5,-5;rotationz,-10;ztest,1;diffusealpha,0" />

	</children></Layer>

	<Layer Type="ActorFrameTexture" Name="water_aft" />
	<Layer Type="Sprite" Name="water_sprite" Frag="water.frag" />

	<Layer File="atmos" InitCommand="zoomto,SCREEN_WIDTH,SCREEN_HEIGHT;xy,SCREEN_CENTER_X,SCREEN_CENTER_Y;diffusealpha,0.2" />

	<Layer Type="ActorFrameTexture" Name="bloom_aft" InitCommand="hidden,1" OnCommand="%xero.aft" />
	<Layer Type="Sprite" Name="bloomh_sprite" InitCommand="blend,add;diffusealpha,0.5" OnCommand="%xero.sprite" 
		Frag="blur.frag" />

	<Layer Type="ActorFrame" InitCommand="xy,SCREEN_CENTER_X,SCREEN_CENTER_Y;fov,45" FarDist="9E9" Name="plr_af"><children>
		<Layer Type = "ActorProxy" Name = "PP[1]" />
		<Layer Type = "ActorProxy" Name = "scroll_prx[1]" />
		<Layer Type = "ActorProxy" Name = "scroll_prx[3]" />
		<Layer Type = "ActorProxy" Name = "scroll_prx[5]" />

		<Layer Type = "ActorProxy" Name = "PP[2]" />
		<Layer Type = "ActorProxy" Name = "scroll_prx[2]" />
		<Layer Type = "ActorProxy" Name = "scroll_prx[4]" />
		<Layer Type = "ActorProxy" Name = "scroll_prx[6]" />

		<Layer Type="Quad" Name="scrollcover_l" InitCommand="x,-SCREEN_CENTER_X;zoomto,(SCREEN_WIDTH-256)/2,SCREEN_HEIGHT;diffuse,0,0,0,1;halign,0;cropright,1" />
		<Layer Type="Quad" Name="scrollcover_r" InitCommand="x,SCREEN_CENTER_X;zoomto,(SCREEN_WIDTH-256)/2,SCREEN_HEIGHT;diffuse,0,0,0,1;halign,1;cropleft,1" />

		<Layer Type="Sprite" Texture="stripe" Name="scrollcover_l_stripe" InitCommand="x,-SCREEN_CENTER_X;zoomto,(SCREEN_WIDTH-256)/2,SCREEN_HEIGHT*2;customtexturerect,0,0,1,32;halign,0;diffusealpha,0.1;skewy,0.02;cropright,1" />
		<Layer Type="Sprite" Texture="stripe" Name="scrollcover_r_stripe" InitCommand="x,SCREEN_CENTER_X;zoomto,(SCREEN_WIDTH-256)/2,SCREEN_HEIGHT*2;customtexturerect,0,0,1,32;halign,1;diffusealpha,0.1;skewy,0.02;cropleft,1" />

		<Layer File="scrollshine" Name="scrollcover_l_shine" InitCommand="x,-SCREEN_CENTER_X;zoomto,(SCREEN_WIDTH-256)/2,SCREEN_HEIGHT;halign,0;cropright,1" />
		<Layer File="scrollshine" Name="scrollcover_r_shine" InitCommand="x,SCREEN_CENTER_X;zoomto,(SCREEN_WIDTH-256)/2,SCREEN_HEIGHT;halign,0;cropright,1;basezoomx,-1" />
	</children></Layer>

	<Layer Type="ActorFrame" Name="pixelborder_af" InitCommand="xy,SCREEN_CENTER_X,SCREEN_CENTER_Y-SCREEN_HEIGHT;y2,-SCREEN_HEIGHT"><children>
		<Layer File="pole" InitCommand="y,SCREEN_HEIGHT-200;zoomx,0.5" />
		<Layer File="pixelglare" InitCommand="y,SCREEN_HEIGHT;zoom,0.3;zoomx,-0.3" />
	</children></Layer>

	<Layer Type="ActorFrameTexture" Name="mask_aft" OnCommand="%xero.aft" />

	<Layer Type="Quad" InitCommand="zoomto,SCREEN_WIDTH,SCREEN_HEIGHT;xy,SCREEN_CENTER_X,SCREEN_CENTER_Y;diffuse,0,0,0,0;clearzbuffer,1" />
	<Layer Type="Sprite" Name="reddisplay_sprite" Frag="redmask.frag" OnCommand="%xero.sprite" />
	<Layer Type="Quad" InitCommand="zoomto,SCREEN_WIDTH,SCREEN_HEIGHT;xy,SCREEN_CENTER_X,SCREEN_CENTER_Y;diffuse,0,0,0,0;clearzbuffer,1" />
	<Layer Type="Sprite" Name="greendisplay_sprite" Frag="greenmask.frag" OnCommand="%xero.sprite" />
	<Layer Type="Quad" InitCommand="zoomto,SCREEN_WIDTH,SCREEN_HEIGHT;xy,SCREEN_CENTER_X,SCREEN_CENTER_Y;diffuse,0,0,0,0;clearzbuffer,1" />
	<Layer Type="Sprite" Name="bluedisplay_sprite" Frag="bluemask.frag" OnCommand="%xero.sprite" />
	<Layer Type="Quad" InitCommand="zoomto,SCREEN_WIDTH,SCREEN_HEIGHT;xy,SCREEN_CENTER_X,SCREEN_CENTER_Y;diffuse,0,0,0,0;clearzbuffer,1" />

	<Layer Type="ActorFrame" Name="pixelglare_af" InitCommand="xy,SCREEN_CENTER_X,SCREEN_CENTER_Y-SCREEN_HEIGHT;y2,-SCREEN_HEIGHT"><children>
		<Layer File="pixel_smudges" InitCommand="diffusealpha,0.3;y,SCREEN_HEIGHT;zoomy,0.20;zoomx,-0.15;blend,add;cropleft,0.03;cropright,0.03;croptop,0.015;cropbottom,0.015" />
	</children></Layer>

	<Layer File="segment1" Name="segment1label" InitCommand="xy,10,SCREEN_HEIGHT-10;rotationz,-90;zoom,0.17;align,0,0;diffusealpha,0" />
	<Layer File="segment2" Name="segment2label" InitCommand="xy,10,10;rotationz,-90;zoom,0.17;align,1,0;diffusealpha,0" />
	<Layer File="segment3" Name="segment3label" InitCommand="xy,SCREEN_WIDTH-10,SCREEN_HEIGHT-10;rotationz,90;zoom,0.17;align,1,0;diffusealpha,0" />

	<Layer Type="ActorFrame" InitCommand="fov,90"><children>
		<Layer Type="ActorProxy" Name="laserfgproxy" InitCommand="hidden,1" />
	</children></Layer>

	<Layer Type="ActorFrame" InitCommand="xy,SCREEN_CENTER_X,SCREEN_CENTER_Y" Name="laser_glow"><children>
		<Layer File="laserbody" Name="laser[1]['glow']" />
		<Layer File="laserbody" Name="laser[2]['glow']" />
		<Layer File="laserbody" Name="laser[3]['glow']" />
		<Layer File="laserbody" Name="laser[4]['glow']" />
		<Layer File="laserbody" Name="laser[5]['glow']" />
		<Layer File="laserbody" Name="laser[6]['glow']" />
		<Layer File="laserbody" Name="laser[7]['glow']" />
		<Layer File="laserbody" Name="laser[8]['glow']" />
	</children></Layer>

	<Layer Type="ActorFrameTexture" Name="bloomlaser_aft" InitCommand="hidden,1" OnCommand="%xero.aft" />
	<Layer Type="Sprite" Name="bloomlaser_sprite" InitCommand="blend,add;diffusealpha,0.5;hidden,1" OnCommand="%xero.sprite" 
		Frag="blur.frag" />

	<Layer Type="ActorFrameTexture" Name="crt_aft" OnCommand="%xero.aft" />
	<Layer Type="Sprite" Name="crt_sprite" Frag="crt.frag" OnCommand="%xero.sprite" InitCommand="hidden,1" />

	<Layer Type="ActorFrameTexture" Name="color_aft" />
	<Layer Type="Sprite" Name="color_sprite" Frag="color.frag" />

	<Layer Type="ActorFrameTexture" Name="zoom_aft" OnCommand="%xero.aft" />
	<Layer Type="Sprite" Name="zoom_sprite" OnCommand="%xero.sprite" />

	<Layer Type = "ActorProxy" Name = "PC[1]" />
	<Layer Type = "ActorProxy" Name = "PC[2]" />
	<Layer Type = "ActorProxy" Name = "PJ[1]" />
	<Layer Type = "ActorProxy" Name = "PJ[2]" />

	<Layer Type="ActorFrameTexture" Name="glitch_aft" OnCommand="%xero.aft" />
	<Layer Type="Sprite" Name="glitch_sprite" OnCommand="%xero.sprite" Frag="hglitch.frag" />

	<Code Name="judgment_handle" />

	<!--<Layer Type="Sprite" Name="testest" OnCommand="%xero.sprite" />-->

	<Layer Type="Quad" Name="screenhide" InitCommand="zoomto,SCREEN_WIDTH,SCREEN_HEIGHT;xy,SCREEN_CENTER_X,SCREEN_CENTER_Y;diffuse,0,0,0,1" />
</children></Mods>

